# Agent Communication Protocol v1.0
# ===================================
# Standardized message format for inter-agent communication
# within the Synapse System orchestration framework

version: "1.0"
protocol: "synapse-agent-communication"
last_updated: "2024-09-18"

# Message Structure
# =================

message_schema:
  type: object
  required: ["header", "payload"]
  properties:
    header:
      type: object
      required: ["version", "timestamp", "message_id", "from_agent", "to_agent", "message_type"]
      properties:
        version:
          type: string
          description: "Protocol version"
          example: "1.0"
        timestamp:
          type: string
          format: date-time
          description: "ISO 8601 timestamp when message was created"
        message_id:
          type: string
          description: "Unique identifier for this message"
        from_agent:
          type: string
          description: "Agent sending the message"
          enum: ["synapse-project-manager", "architect", "rust-specialist", "typescript-specialist",
                 "golang-specialist", "python-specialist", "devops-engineer", "ux-designer",
                 "security-specialist", "docs-writer", "code-hound", "test-runner", "git-workflow", "file-creator"]
        to_agent:
          type: string
          description: "Agent receiving the message"
        message_type:
          type: string
          enum: ["task_assignment", "status_update", "result_delivery", "context_sharing", "request_help"]
        correlation_id:
          type: string
          description: "Optional ID to correlate related messages"
        priority:
          type: string
          enum: ["low", "normal", "high", "urgent", "critical"]
          default: "normal"

    payload:
      type: object
      description: "Message content specific to message_type"

# Message Types
# =============

message_types:

  task_assignment:
    description: "Assign a task to an agent"
    payload_schema:
      type: object
      required: ["task"]
      properties:
        task:
          type: object
          required: ["id", "action", "description"]
          properties:
            id:
              type: string
              description: "Unique task identifier"
            action:
              type: string
              description: "Action to perform"
            description:
              type: string
              description: "Detailed task description"
            priority:
              type: string
              enum: ["low", "normal", "high", "urgent", "critical"]
            deadline:
              type: string
              format: date-time
              description: "Task deadline if applicable"
            timeout:
              type: integer
              description: "Maximum execution time in seconds"
              default: 300
        context:
          type: object
          description: "Task context and parameters"
          properties:
            user_request:
              type: string
              description: "Original user request"
            language:
              type: string
              description: "Programming language context"
            project_type:
              type: string
              description: "Type of project (web-api, cli-tool, library, etc.)"
            previous_results:
              type: object
              description: "Results from previous agents in workflow"
            requirements:
              type: array
              items:
                type: string
              description: "Specific requirements for this task"
            constraints:
              type: object
              description: "Constraints and limitations"
        expected_deliverables:
          type: array
          items:
            type: string
          description: "What outputs are expected from this task"

  status_update:
    description: "Update on task progress"
    payload_schema:
      type: object
      required: ["task_id", "status"]
      properties:
        task_id:
          type: string
          description: "ID of the task being updated"
        status:
          type: string
          enum: ["assigned", "in_progress", "blocked", "completed", "failed"]
        progress_percentage:
          type: integer
          minimum: 0
          maximum: 100
          description: "Completion percentage"
        current_step:
          type: string
          description: "Current step being executed"
        estimated_completion:
          type: string
          format: date-time
          description: "Estimated completion time"
        blockers:
          type: array
          items:
            type: string
          description: "Issues blocking progress"
        notes:
          type: string
          description: "Additional notes about progress"

  result_delivery:
    description: "Deliver task results"
    payload_schema:
      type: object
      required: ["task_id", "status", "output"]
      properties:
        task_id:
          type: string
          description: "ID of completed task"
        status:
          type: string
          enum: ["completed", "failed", "partial"]
        output:
          type: object
          properties:
            files_created:
              type: array
              items:
                type: string
              description: "List of files created"
            files_modified:
              type: array
              items:
                type: string
              description: "List of files modified"
            tests_passed:
              type: boolean
              description: "Whether tests passed"
            coverage_percentage:
              type: number
              description: "Test coverage percentage"
            performance_metrics:
              type: object
              description: "Performance metrics if applicable"
            documentation_updated:
              type: boolean
              description: "Whether documentation was updated"
            artifacts:
              type: array
              items:
                type: string
              description: "Generated artifacts (binaries, reports, etc.)"
        execution_summary:
          type: string
          description: "Summary of what was accomplished"
        lessons_learned:
          type: array
          items:
            type: string
          description: "Lessons learned during execution"
        next_steps:
          type: array
          items:
            type: string
          description: "Suggested next steps"
        error_details:
          type: object
          description: "Error details if task failed"
          properties:
            error_type:
              type: string
            error_message:
              type: string
            stack_trace:
              type: string
            suggested_fixes:
              type: array
              items:
                type: string

  context_sharing:
    description: "Share context between agents"
    payload_schema:
      type: object
      required: ["context_type", "data"]
      properties:
        context_type:
          type: string
          enum: ["architecture_decision", "code_pattern", "configuration", "test_result", "performance_data"]
        data:
          type: object
          description: "Context data specific to context_type"
        scope:
          type: string
          enum: ["global", "workflow", "task"]
          description: "Scope of context applicability"
        expiration:
          type: string
          format: date-time
          description: "When this context expires"

  request_help:
    description: "Request assistance from another agent"
    payload_schema:
      type: object
      required: ["help_type", "description"]
      properties:
        help_type:
          type: string
          enum: ["consultation", "code_review", "knowledge_request", "resource_sharing"]
        description:
          type: string
          description: "What help is needed"
        urgency:
          type: string
          enum: ["low", "medium", "high"]
          default: "medium"
        related_task_id:
          type: string
          description: "Task ID this help request relates to"
        context:
          type: object
          description: "Additional context for the help request"

# Standard Response Format
# ========================

response_schema:
  type: object
  required: ["header", "payload"]
  properties:
    header:
      type: object
      required: ["version", "timestamp", "message_id", "from_agent", "to_agent", "response_to", "status"]
      properties:
        version:
          type: string
        timestamp:
          type: string
          format: date-time
        message_id:
          type: string
        from_agent:
          type: string
        to_agent:
          type: string
        response_to:
          type: string
          description: "Message ID this is responding to"
        status:
          type: string
          enum: ["acknowledged", "completed", "rejected", "error"]

    payload:
      type: object
      properties:
        acknowledgment:
          type: string
          description: "Acknowledgment message"
        estimated_completion_time:
          type: string
          format: date-time
          description: "When task is expected to complete"
        rejection_reason:
          type: string
          description: "Why request was rejected"
        error_message:
          type: string
          description: "Error details if applicable"

# Communication Patterns
# ======================

patterns:

  workflow_execution:
    description: "Standard pattern for workflow execution"
    steps:
      1:
        action: "synapse-project-manager sends task_assignment to first agent"
        message_type: "task_assignment"
      2:
        action: "Agent sends acknowledgment"
        message_type: "response (acknowledged)"
      3:
        action: "Agent provides periodic status_update messages"
        message_type: "status_update"
      4:
        action: "Agent sends result_delivery when complete"
        message_type: "result_delivery"
      5:
        action: "synapse-project-manager assigns next task with context"
        message_type: "task_assignment (with previous results)"

  collaborative_work:
    description: "Pattern for agents working together"
    steps:
      1:
        action: "Primary agent requests help"
        message_type: "request_help"
      2:
        action: "Helper agent acknowledges"
        message_type: "response (acknowledged)"
      3:
        action: "Helper agent provides assistance"
        message_type: "context_sharing or result_delivery"
      4:
        action: "Primary agent acknowledges help received"
        message_type: "response (acknowledged)"

  knowledge_sharing:
    description: "Pattern for sharing discoveries and learnings"
    steps:
      1:
        action: "Agent discovers useful information"
        message_type: "context_sharing"
      2:
        action: "Other agents acknowledge if applicable"
        message_type: "response (acknowledged)"

# Error Handling
# ==============

error_handling:
  timeout:
    description: "Message not acknowledged within timeout period"
    default_timeout: 30
    action: "Retry up to 3 times, then escalate to synapse-project-manager"

  invalid_message:
    description: "Message doesn't conform to schema"
    action: "Send error response with details"

  agent_unavailable:
    description: "Target agent is not available"
    action: "Route through synapse-project-manager for reassignment"

  task_failure:
    description: "Agent fails to complete assigned task"
    action: "Send result_delivery with status=failed and error details"

# Quality Guidelines
# ==================

message_quality:

  context_completeness:
    description: "Include all necessary context for the receiving agent"
    guidelines:
      - "Include previous results that inform current task"
      - "Specify requirements and constraints clearly"
      - "Provide enough detail for autonomous execution"

  result_transparency:
    description: "Be clear about what was accomplished and what wasn't"
    guidelines:
      - "List specific deliverables produced"
      - "Include test results and quality metrics"
      - "Document any deviations from requirements"
      - "Suggest next steps or improvements"

  error_informativeness:
    description: "Provide actionable error information"
    guidelines:
      - "Include specific error messages and codes"
      - "Provide stack traces when applicable"
      - "Suggest potential fixes or workarounds"
      - "Indicate if retry might succeed"

# Implementation Notes
# ===================

implementation:
  message_routing:
    description: "Messages are routed through synapse-project-manager"
    details: "All inter-agent communication goes through the project manager for coordination and logging"

  persistence:
    description: "Messages are stored for workflow analysis"
    details: "Communication history helps improve future orchestration"

  monitoring:
    description: "Message patterns are monitored for optimization"
    details: "Identify bottlenecks and improve workflow efficiency"