# Bug Fix Workflow
# ================
# Streamlined workflow for fixing bugs with proper verification

id: "bug_fix"
name: "Bug Fix"
description: "Efficient workflow for identifying, fixing, and verifying bug resolution"
type: "bug_fix"
version: "1.0"
estimated_duration: 780  # seconds

# Workflow Metadata
metadata:
  author: "Synapse System"
  created_at: "2024-09-18"
  tags: ["bugfix", "maintenance", "quality"]
  complexity: "low"
  team_size: "2-4 agents"

# Variables
variables:
  language:
    description: "Programming language for the project"
    type: "string"
    required: true
    options: ["rust", "typescript", "golang", "python", "zig", "c"]

  severity:
    description: "Bug severity level"
    type: "string"
    default: "medium"
    options: ["low", "medium", "high", "critical"]

  bug_type:
    description: "Type of bug being fixed"
    type: "string"
    default: "functional"
    options: ["functional", "performance", "security", "ui", "data"]

# Single Phase: Sequential Bug Fix Process
phases:

  - name: "Bug Fix Process"
    description: "Complete bug identification and resolution process"
    mode: "sequential"
    dependencies: []
    estimated_duration: 780

    tasks:

      # Step 1: Reproduce and Understand
      - agent: "test-runner"
        action: "reproduce_bug"
        description: "Reproduce the bug and create failing test case"
        timeout: 180
        priority: "critical"
        context:
          requirements:
            - "Understand the bug report and expected behavior"
            - "Reproduce the bug in development environment"
            - "Create a failing test that demonstrates the bug"
            - "Document the reproduction steps"
            - "Identify the scope and impact of the bug"
        expected_deliverables:
          - "Bug reproduction steps"
          - "Failing test case"
          - "Impact assessment"
          - "Root cause hypothesis"

      # Step 2: Analyze and Fix
      - agent: "${language}-specialist"
        action: "implement_fix"
        description: "Analyze root cause and implement bug fix"
        timeout: 300
        priority: "high"
        context:
          requirements:
            - "Analyze the root cause of the bug"
            - "Design a targeted fix that addresses the root cause"
            - "Implement the fix with minimal code changes"
            - "Ensure fix doesn't introduce side effects"
            - "Follow language-specific best practices"
            - "Include additional tests if needed"
        expected_deliverables:
          - "Root cause analysis"
          - "Bug fix implementation"
          - "Code changes with clear comments"
          - "Additional test cases (if needed)"

      # Step 3: Verify Fix
      - agent: "test-runner"
        action: "verify_fix"
        description: "Verify the bug fix resolves the issue"
        timeout: 120
        priority: "critical"
        context:
          requirements:
            - "Run the previously failing test to confirm it now passes"
            - "Execute full test suite to check for regressions"
            - "Verify the original bug scenario is resolved"
            - "Test edge cases related to the bug"
            - "Confirm performance hasn't degraded"
        expected_deliverables:
          - "Fix verification report"
          - "Regression test results"
          - "Performance impact assessment"
          - "Test coverage report"

      # Step 4: Quality Check
      - agent: "code-hound"
        action: "quick_review"
        description: "Quick quality verification of the bug fix"
        timeout: 120
        priority: "medium"
        context:
          requirements:
            - "Review the fix for code quality"
            - "Ensure the fix follows coding standards"
            - "Verify the fix is minimal and targeted"
            - "Check for proper error handling"
            - "Validate test quality and coverage"
        expected_deliverables:
          - "Code quality assessment"
          - "Standards compliance verification"
          - "Fix approach validation"
          - "Improvement suggestions"

      # Step 5: Security Review (Critical Bugs Only)
      - agent: "security-specialist"
        action: "security_review"
        description: "Security review for security-related or critical bugs"
        timeout: 120
        priority: "high"
        enabled_if: "${bug_type == 'security' || severity == 'critical'}"
        context:
          requirements:
            - "Review fix for security implications"
            - "Ensure no new vulnerabilities introduced"
            - "Validate input sanitization if applicable"
            - "Check for proper authentication/authorization"
        expected_deliverables:
          - "Security impact assessment"
          - "Vulnerability scan results"
          - "Security recommendations"

      # Step 6: Commit and Document
      - agent: "git-workflow"
        action: "commit_fix"
        description: "Commit bug fix with proper documentation"
        timeout: 60
        priority: "medium"
        context:
          requirements:
            - "Create clear, descriptive commit message"
            - "Include bug ID/reference in commit"
            - "Document the fix in commit description"
            - "Ensure proper commit formatting"
            - "Link to relevant issues or tickets"
        expected_deliverables:
          - "Committed bug fix"
          - "Clear commit message"
          - "Linked bug references"

# Quality Gates
quality_gates:

  bug_reproduced:
    after_task: "reproduce_bug"
    criteria:
      - "Bug successfully reproduced"
      - "Failing test case created"
      - "Root cause hypothesis documented"

  fix_implemented:
    after_task: "implement_fix"
    criteria:
      - "Root cause identified"
      - "Fix implemented and tested locally"
      - "No compilation errors"

  fix_verified:
    after_task: "verify_fix"
    criteria:
      - "Originally failing test now passes"
      - "No regressions introduced"
      - "All tests passing"

  quality_approved:
    after_task: "quick_review"
    criteria:
      - "Code quality standards met"
      - "Fix approach approved"
      - "No major issues identified"

# Success Criteria
success_criteria:
  - "Bug successfully reproduced and understood"
  - "Root cause identified and addressed"
  - "Fix implemented with minimal code changes"
  - "All tests passing including new bug test"
  - "No regressions introduced"
  - "Code quality standards maintained"
  - "Fix properly committed and documented"

# Escalation Conditions
escalation_conditions:
  - condition: "cannot_reproduce"
    action: "escalate_to_project_manager"
    description: "Cannot reproduce the reported bug"

  - condition: "root_cause_unclear"
    action: "request_architect_help"
    description: "Root cause is unclear or complex"

  - condition: "fix_introduces_regressions"
    action: "pause_and_redesign"
    description: "Proposed fix introduces regressions"

  - condition: "security_implications"
    action: "mandatory_security_review"
    description: "Bug fix has security implications"

# Severity-Based Customizations
customization:

  critical_bug:
    description: "Enhanced process for critical bugs"
    condition: "${severity == 'critical'}"
    changes:
      - reduce_timeout: "reproduce_bug:120"
      - reduce_timeout: "implement_fix:180"
      - mandatory_task: "security_review"
      - add_notification: "stakeholders"
      - priority_override: "urgent"

  low_severity_bug:
    description: "Simplified process for low severity bugs"
    condition: "${severity == 'low'}"
    changes:
      - skip_task: "security_review"
      - increase_timeout: "implement_fix:450"
      - optional_task: "quick_review"
      - batch_commit: true

  security_bug:
    description: "Security-focused process for security bugs"
    condition: "${bug_type == 'security'}"
    changes:
      - mandatory_task: "security_review"
      - add_task:
          agent: "security-specialist"
          action: "vulnerability_assessment"
          description: "Assess vulnerability impact"
          position: "after:reproduce_bug"
      - confidential_mode: true

  performance_bug:
    description: "Performance-focused process"
    condition: "${bug_type == 'performance'}"
    changes:
      - add_task:
          agent: "test-runner"
          action: "performance_benchmark"
          description: "Benchmark performance before and after fix"
          position: "after:verify_fix"
      - performance_threshold: "no_degradation"

# Monitoring and Metrics
monitoring:
  key_metrics:
    - "Time to reproduce bug"
    - "Time to implement fix"
    - "Number of regression issues"
    - "Fix success rate"
    - "Code changes required for fix"

  sla_targets:
    critical: "2 hours"
    high: "1 day"
    medium: "3 days"
    low: "1 week"

  alerts:
    - condition: "sla_at_risk"
      threshold: "75% of SLA time elapsed"
      action: "notify_project_manager"

    - condition: "multiple_regressions"
      threshold: "more than 2 regression test failures"
      action: "escalate_to_architect"

    - condition: "security_bug_timeout"
      threshold: "security bug taking more than 4 hours"
      action: "escalate_to_security_team"

# Documentation Requirements
documentation:
  commit_message_format: |
    fix: [${bug_id}] Brief description of the fix

    - Root cause: Description of what caused the bug
    - Solution: How the fix addresses the root cause
    - Impact: What areas are affected by this change
    - Testing: How the fix was verified

    Fixes #${bug_id}

  required_artifacts:
    - "Bug reproduction steps"
    - "Root cause analysis"
    - "Fix verification report"
    - "Regression test results"

# Integration Points
integration:
  issue_tracking:
    update_status: "in_progress"
    add_comments: true
    close_on_completion: true

  ci_cd:
    trigger_build: true
    run_regression_tests: true
    deploy_to_staging: false  # Manual decision for bugs

  notifications:
    channels: ["project_team", "stakeholders"]
    include_metrics: true
    severity_based: true