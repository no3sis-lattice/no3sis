# Code Refactoring Workflow
# =========================
# Comprehensive workflow for safe and effective code refactoring

id: "refactoring"
name: "Code Refactoring"
description: "Systematic approach to improving code structure while preserving functionality"
type: "refactoring"
version: "1.0"
estimated_duration: 1560  # seconds

# Workflow Metadata
metadata:
  author: "Synapse System"
  created_at: "2024-09-18"
  tags: ["refactoring", "code-quality", "maintenance"]
  complexity: "medium"
  team_size: "3-5 agents"

# Variables
variables:
  language:
    description: "Programming language for the project"
    type: "string"
    required: true
    options: ["rust", "typescript", "golang", "python", "zig", "c"]

  refactoring_type:
    description: "Type of refactoring being performed"
    type: "string"
    default: "structure"
    options: ["structure", "performance", "readability", "architecture", "dependency"]

  scope:
    description: "Scope of the refactoring effort"
    type: "string"
    default: "module"
    options: ["function", "class", "module", "package", "system"]

  risk_level:
    description: "Risk level of the refactoring"
    type: "string"
    default: "medium"
    options: ["low", "medium", "high"]

# Workflow Phases
phases:

  # Phase 1: Planning and Analysis
  - name: "Planning"
    description: "Analyze current code and plan refactoring approach"
    mode: "sequential"
    dependencies: []
    estimated_duration: 480

    tasks:

      - agent: "architect"
        action: "analyze_current_code"
        description: "Analyze current code structure and identify refactoring opportunities"
        timeout: 240
        priority: "high"
        context:
          requirements:
            - "Analyze current code architecture and structure"
            - "Identify code smells and improvement opportunities"
            - "Assess complexity and maintainability metrics"
            - "Document current dependencies and interfaces"
            - "Evaluate performance characteristics"
            - "Identify breaking change risks"
        expected_deliverables:
          - "Current code analysis report"
          - "Code quality metrics baseline"
          - "Dependency mapping"
          - "Risk assessment"
          - "Performance baseline"

      - agent: "architect"
        action: "plan_refactoring"
        description: "Create detailed refactoring plan and approach"
        timeout: 240
        priority: "high"
        context:
          requirements:
            - "Define refactoring goals and success criteria"
            - "Plan refactoring steps and sequence"
            - "Identify potential breaking changes"
            - "Design new code structure"
            - "Plan for backward compatibility if needed"
            - "Estimate effort and timeline"
        expected_deliverables:
          - "Refactoring plan and timeline"
          - "Target architecture design"
          - "Breaking change mitigation strategy"
          - "Success criteria definition"
          - "Rollback plan"

  # Phase 2: Preparation
  - name: "Preparation"
    description: "Prepare codebase for safe refactoring"
    mode: "sequential"
    dependencies: ["Planning"]
    estimated_duration: 300

    tasks:

      - agent: "test-runner"
        action: "baseline_tests"
        description: "Establish comprehensive test baseline before refactoring"
        timeout: 180
        priority: "critical"
        context:
          requirements:
            - "Run complete test suite and ensure all tests pass"
            - "Measure current test coverage"
            - "Identify areas with insufficient test coverage"
            - "Run performance benchmarks for baseline"
            - "Document current behavior comprehensively"
        expected_deliverables:
          - "Complete test baseline report"
          - "Test coverage analysis"
          - "Performance benchmark results"
          - "Behavior documentation"
          - "Test gaps identification"

      - agent: "${language}-specialist"
        action: "prepare_codebase"
        description: "Prepare codebase for refactoring (add tests if needed)"
        timeout: 120
        priority: "high"
        context:
          requirements:
            - "Add missing tests for critical functionality"
            - "Create integration tests for refactored components"
            - "Set up feature flags if needed for gradual rollout"
            - "Create backup branches and checkpoints"
            - "Document current API contracts"
        expected_deliverables:
          - "Additional test coverage"
          - "Integration test suite"
          - "Feature flags setup (if applicable)"
          - "Code backup and checkpoints"
          - "API contract documentation"

  # Phase 3: Execution
  - name: "Execution"
    description: "Execute the refactoring in planned increments"
    mode: "sequential"
    dependencies: ["Preparation"]
    estimated_duration: 600

    tasks:

      - agent: "${language}-specialist"
        action: "execute_refactoring"
        description: "Execute refactoring following the planned approach"
        timeout: 600
        priority: "high"
        context:
          requirements:
            - "Follow the refactoring plan step by step"
            - "Make incremental changes with frequent commits"
            - "Preserve all existing functionality"
            - "Maintain API compatibility where possible"
            - "Update internal documentation and comments"
            - "Apply consistent coding standards"
            - "Optimize for readability and maintainability"
        expected_deliverables:
          - "Refactored code implementation"
          - "Incremental commit history"
          - "Updated internal documentation"
          - "Preserved functionality verification"
          - "API compatibility maintenance"

  # Phase 4: Verification
  - name: "Verification"
    description: "Verify refactoring maintains functionality and improves quality"
    mode: "parallel"
    dependencies: ["Execution"]
    estimated_duration: 360

    tasks:

      - agent: "test-runner"
        action: "verify_functionality"
        description: "Verify all functionality remains intact after refactoring"
        timeout: 180
        priority: "critical"
        context:
          requirements:
            - "Run complete test suite and ensure all tests pass"
            - "Compare current behavior with baseline documentation"
            - "Run integration tests with dependent systems"
            - "Execute performance benchmarks"
            - "Verify API contracts remain intact"
            - "Test edge cases and error conditions"
        expected_deliverables:
          - "Functionality verification report"
          - "Performance comparison analysis"
          - "API compatibility verification"
          - "Integration test results"
          - "Behavior consistency confirmation"

      - agent: "code-hound"
        action: "quality_assessment"
        description: "Assess code quality improvements and standards compliance"
        timeout: 240
        priority: "high"
        context:
          requirements:
            - "Measure code quality metrics improvement"
            - "Verify coding standards compliance"
            - "Assess maintainability improvements"
            - "Check for code duplication reduction"
            - "Evaluate complexity reduction"
            - "Verify documentation quality"
            - "Assess testability improvements"
        expected_deliverables:
          - "Code quality improvement report"
          - "Metrics comparison (before/after)"
          - "Standards compliance verification"
          - "Maintainability assessment"
          - "Technical debt reduction analysis"

      - agent: "security-specialist"
        action: "security_verification"
        description: "Verify refactoring doesn't introduce security vulnerabilities"
        timeout: 120
        priority: "medium"
        enabled_if: "${scope != 'function' && risk_level != 'low'}"
        context:
          requirements:
            - "Scan for introduced security vulnerabilities"
            - "Verify authentication/authorization unchanged"
            - "Check for data exposure risks"
            - "Validate input sanitization preservation"
            - "Review access control modifications"
        expected_deliverables:
          - "Security impact assessment"
          - "Vulnerability scan results"
          - "Access control verification"
          - "Data protection confirmation"

  # Phase 5: Documentation and Cleanup
  - name: "Documentation"
    description: "Update documentation and clean up temporary artifacts"
    mode: "parallel"
    dependencies: ["Verification"]
    estimated_duration: 180

    tasks:

      - agent: "docs-writer"
        action: "update_documentation"
        description: "Update all relevant documentation to reflect refactoring changes"
        timeout: 180
        priority: "medium"
        context:
          requirements:
            - "Update architecture documentation"
            - "Revise API documentation if needed"
            - "Update developer guides and tutorials"
            - "Document new code patterns introduced"
            - "Update deployment and configuration docs"
            - "Create migration guide if needed"
        expected_deliverables:
          - "Updated architecture documentation"
          - "Revised API documentation"
          - "Updated developer guides"
          - "Code pattern documentation"
          - "Migration guide (if applicable)"

      - agent: "${language}-specialist"
        action: "cleanup_artifacts"
        description: "Clean up temporary refactoring artifacts and optimize final code"
        timeout: 120
        priority: "low"
        context:
          requirements:
            - "Remove temporary code and comments"
            - "Clean up unused imports and dependencies"
            - "Optimize final code structure"
            - "Remove feature flags if used"
            - "Clean up development artifacts"
            - "Finalize code formatting"
        expected_deliverables:
          - "Cleaned and optimized code"
          - "Removed temporary artifacts"
          - "Final code formatting"
          - "Dependency cleanup"

# Quality Gates
quality_gates:

  planning_complete:
    after_phase: "Planning"
    criteria:
      - "Current code analysis completed"
      - "Refactoring plan approved"
      - "Risk assessment documented"
      - "Success criteria defined"

  preparation_ready:
    after_phase: "Preparation"
    criteria:
      - "All tests passing baseline"
      - "Test coverage adequate (>80%)"
      - "Performance baseline established"
      - "Backup checkpoints created"

  refactoring_complete:
    after_phase: "Execution"
    criteria:
      - "Refactoring implemented according to plan"
      - "Code compiles without errors"
      - "Basic functionality preserved"

  verification_passed:
    after_phase: "Verification"
    criteria:
      - "All tests passing"
      - "Performance not degraded"
      - "Code quality metrics improved"
      - "No security vulnerabilities introduced"

# Success Criteria
success_criteria:
  - "All existing functionality preserved"
  - "Code quality metrics improved"
  - "Technical debt reduced"
  - "Maintainability increased"
  - "Performance maintained or improved"
  - "Test coverage maintained or improved"
  - "Documentation updated and accurate"

# Risk Mitigation
risk_mitigation:

  high_risk_procedures:
    condition: "${risk_level == 'high'}"
    additional_steps:
      - "Mandatory architect review of plan"
      - "Phased rollout with feature flags"
      - "Additional integration testing"
      - "Stakeholder approval required"
      - "Rollback plan testing"

  large_scope_procedures:
    condition: "${scope == 'system' || scope == 'package'}"
    additional_steps:
      - "Multi-phase refactoring approach"
      - "Continuous integration at each phase"
      - "Stakeholder communication plan"
      - "Extended verification period"

# Customization Options
customization:

  performance_refactoring:
    description: "Focus on performance improvements"
    condition: "${refactoring_type == 'performance'}"
    changes:
      - add_task:
          phase: "Verification"
          agent: "test-runner"
          action: "performance_validation"
          description: "Validate performance improvements"
      - performance_threshold: "minimum_10_percent_improvement"
      - extended_benchmarking: true

  architecture_refactoring:
    description: "Major architectural changes"
    condition: "${refactoring_type == 'architecture'}"
    changes:
      - extend_timeout: "execute_refactoring:900"
      - mandatory_task: "security_verification"
      - add_task:
          phase: "Documentation"
          agent: "architect"
          action: "architecture_review"
          description: "Final architecture validation"

  simple_refactoring:
    description: "Simple, low-risk refactoring"
    condition: "${risk_level == 'low' && scope == 'function'}"
    changes:
      - skip_task: "security_verification"
      - reduce_timeout: "baseline_tests:120"
      - reduce_timeout: "execute_refactoring:300"
      - optional_task: "update_documentation"

# Monitoring and Metrics
monitoring:
  quality_metrics:
    - "Cyclomatic complexity reduction"
    - "Code duplication percentage"
    - "Test coverage percentage"
    - "Technical debt ratio"
    - "Maintainability index"

  performance_metrics:
    - "Execution time comparison"
    - "Memory usage comparison"
    - "Build time impact"
    - "Deployment size impact"

  process_metrics:
    - "Time to complete refactoring"
    - "Number of rollbacks required"
    - "Test failures during process"
    - "Documentation update completeness"

# Rollback Procedures
rollback:
  triggers:
    - "Critical functionality broken"
    - "Performance severely degraded (>25%)"
    - "Security vulnerabilities introduced"
    - "Unable to maintain test coverage"

  procedure:
    - "Revert to latest backup checkpoint"
    - "Validate original functionality restored"
    - "Document lessons learned"
    - "Revise refactoring plan if continuing"

  validation:
    - "All original tests passing"
    - "Performance restored to baseline"
    - "No security regressions"
    - "Documentation consistency maintained"