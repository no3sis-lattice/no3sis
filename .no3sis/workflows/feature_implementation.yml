# Feature Implementation Workflow
# ================================
# Standard workflow for implementing new features with proper quality gates

id: "feature_implementation"
name: "Feature Implementation"
description: "Complete workflow for developing new features from design to delivery"
type: "feature_implementation"
version: "1.0"
estimated_duration: 1620  # seconds

# Workflow Metadata
metadata:
  author: "Synapse System"
  created_at: "2024-09-18"
  tags: ["development", "feature", "standard"]
  complexity: "medium"
  team_size: "3-6 agents"

# Variable Substitutions
variables:
  language:
    description: "Programming language for the project"
    type: "string"
    required: true
    options: ["rust", "typescript", "golang", "python", "zig", "c"]

  feature_type:
    description: "Type of feature being implemented"
    type: "string"
    default: "general"
    options: ["api", "ui", "database", "integration", "general"]

  requires_ui:
    description: "Whether feature requires UI/UX work"
    type: "boolean"
    default: false

# Workflow Phases
phases:

  # Phase 1: Planning & Design
  - name: "Planning"
    description: "Design the solution architecture and user experience"
    mode: "parallel"
    dependencies: []
    estimated_duration: 600

    tasks:
      - agent: "architect"
        action: "design_architecture"
        description: "Design solution architecture and technical approach"
        timeout: 300
        priority: "high"
        context:
          requirements:
            - "Create detailed technical design"
            - "Identify key components and interfaces"
            - "Consider scalability and maintainability"
            - "Document architectural decisions"
        expected_deliverables:
          - "Technical design document"
          - "Component architecture diagram"
          - "API specifications (if applicable)"
          - "Database schema changes (if applicable)"

      - agent: "ux-designer"
        action: "create_mockups"
        description: "Create UI/UX mockups and user interaction flows"
        timeout: 300
        priority: "medium"
        enabled_if: "${requires_ui}"
        context:
          requirements:
            - "Create user interface mockups"
            - "Design user interaction flows"
            - "Ensure accessibility compliance"
            - "Consider mobile responsiveness"
        expected_deliverables:
          - "UI mockups and wireframes"
          - "User flow diagrams"
          - "Accessibility guidelines"
          - "Responsive design specifications"

  # Phase 2: Implementation
  - name: "Implementation"
    description: "Implement the core functionality"
    mode: "sequential"
    dependencies: ["Planning"]
    estimated_duration: 600

    tasks:
      - agent: "${language}-specialist"
        action: "implement_feature"
        description: "Implement core feature functionality following architectural design"
        timeout: 600
        priority: "high"
        context:
          requirements:
            - "Follow architectural design from planning phase"
            - "Implement all specified functionality"
            - "Write comprehensive unit tests"
            - "Follow language-specific coding standards"
            - "Include proper error handling"
            - "Add logging and monitoring hooks"
        expected_deliverables:
          - "Implemented feature code"
          - "Unit tests with >90% coverage"
          - "Integration points with existing code"
          - "Error handling implementation"
          - "Documentation comments in code"

  # Phase 3: Quality Assurance
  - name: "Quality"
    description: "Verify implementation quality and standards compliance"
    mode: "parallel"
    dependencies: ["Implementation"]
    estimated_duration: 300

    tasks:
      - agent: "test-runner"
        action: "execute_tests"
        description: "Execute comprehensive test suite including new tests"
        timeout: 180
        priority: "critical"
        context:
          requirements:
            - "Run all existing tests to ensure no regressions"
            - "Execute new unit tests for implemented feature"
            - "Run integration tests if applicable"
            - "Verify test coverage meets standards"
            - "Run performance tests if applicable"
        expected_deliverables:
          - "Test execution report"
          - "Code coverage report"
          - "Performance test results"
          - "Regression test results"

      - agent: "code-hound"
        action: "review_code"
        description: "Review code quality and standards compliance"
        timeout: 240
        priority: "high"
        context:
          requirements:
            - "Verify adherence to coding standards"
            - "Check for code duplication (DRY principle)"
            - "Validate SOLID principles compliance"
            - "Review error handling patterns"
            - "Check security considerations"
            - "Verify documentation quality"
        expected_deliverables:
          - "Code quality report"
          - "Standards compliance verification"
          - "Security review findings"
          - "Improvement recommendations"

      - agent: "security-specialist"
        action: "security_review"
        description: "Review implementation for security vulnerabilities"
        timeout: 180
        priority: "high"
        enabled_if: "${feature_type == 'api' || feature_type == 'integration'}"
        context:
          requirements:
            - "Scan for common security vulnerabilities"
            - "Review authentication and authorization"
            - "Check input validation and sanitization"
            - "Verify secure data handling"
            - "Review API security if applicable"
        expected_deliverables:
          - "Security vulnerability report"
          - "Security recommendations"
          - "Compliance verification"

  # Phase 4: Documentation & Delivery
  - name: "Delivery"
    description: "Prepare feature for delivery with proper documentation"
    mode: "sequential"
    dependencies: ["Quality"]
    estimated_duration: 420

    tasks:
      - agent: "docs-writer"
        action: "update_documentation"
        description: "Update project documentation with new feature"
        timeout: 240
        priority: "medium"
        context:
          requirements:
            - "Update user documentation with new feature"
            - "Update API documentation if applicable"
            - "Create or update tutorials"
            - "Update changelog and release notes"
            - "Review and update README if needed"
        expected_deliverables:
          - "Updated user documentation"
          - "API documentation updates"
          - "Feature tutorials or guides"
          - "Updated changelog"

      - agent: "git-workflow"
        action: "create_pr"
        description: "Create feature branch and pull request"
        timeout: 180
        priority: "high"
        context:
          requirements:
            - "Create feature branch if not exists"
            - "Commit all changes with descriptive messages"
            - "Create pull request with proper description"
            - "Include testing instructions"
            - "Link to relevant issues or tickets"
            - "Request appropriate reviewers"
        expected_deliverables:
          - "Feature branch created"
          - "Pull request opened"
          - "Proper commit history"
          - "PR description with testing guide"

# Quality Gates
quality_gates:

  planning_complete:
    phase: "Planning"
    criteria:
      - "Architecture design approved"
      - "UI mockups approved (if applicable)"
      - "Technical approach validated"

  implementation_complete:
    phase: "Implementation"
    criteria:
      - "All functionality implemented"
      - "Unit tests written and passing"
      - "Code follows standards"
      - "No compilation errors"

  quality_verified:
    phase: "Quality"
    criteria:
      - "All tests passing"
      - "Code coverage >= 90%"
      - "No critical security issues"
      - "Code quality standards met"

  ready_for_delivery:
    phase: "Delivery"
    criteria:
      - "Documentation updated"
      - "Pull request created"
      - "All quality gates passed"

# Success Criteria
success_criteria:
  - "Feature functionality implemented as specified"
  - "All tests passing with adequate coverage"
  - "Code quality standards met"
  - "Security review completed"
  - "Documentation updated"
  - "Pull request ready for review"

# Rollback Conditions
rollback_conditions:
  - "Critical security vulnerability discovered"
  - "Major regression in existing functionality"
  - "Implementation significantly deviates from design"
  - "Cannot achieve minimum test coverage"

# Customization Options
customization:

  simple_feature:
    description: "Simplified workflow for small features"
    changes:
      - skip_phase: "Planning.ux-designer"
      - reduce_timeout: "Implementation.implement_feature:300"
      - optional_task: "Quality.security-specialist"

  critical_feature:
    description: "Enhanced workflow for critical features"
    changes:
      - add_task:
          phase: "Quality"
          agent: "architect"
          action: "design_review"
          description: "Review implementation against design"
      - increase_coverage: 95
      - mandatory_task: "Quality.security-specialist"

  ui_heavy_feature:
    description: "Workflow optimized for UI-heavy features"
    changes:
      - mandatory_task: "Planning.ux-designer"
      - add_task:
          phase: "Quality"
          agent: "ux-designer"
          action: "ui_review"
          description: "Review implemented UI against mockups"

# Monitoring and Metrics
monitoring:
  key_metrics:
    - "Time from start to implementation complete"
    - "Number of defects found in quality phase"
    - "Test coverage percentage"
    - "Code review findings count"
    - "Time spent in each phase"

  alerts:
    - condition: "timeout_exceeded"
      action: "notify_project_manager"
    - condition: "quality_gate_failed"
      action: "pause_workflow"
    - condition: "critical_security_issue"
      action: "escalate_to_security_team"