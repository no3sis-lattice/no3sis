# Architect Agent Configuration
# High-level system design and architecture specialist

agent:
  name: "architect"
  version: "1.0.0"
  description: "Solutions architect for high-level system design and technical vision"

  # Model selection - Latest Claude models for architectural reasoning
  model_preference:
    primary: "claude-sonnet-4-5"        # Latest Sonnet for complex system design decisions
    fallback: "claude-sonnet-4-0"       # Claude 4.0 Sonnet fallback
    simple_tasks: "claude-3-5-haiku-latest"    # Latest Haiku for basic documentation tasks

  complexity_routing:
    high_complexity: "claude-sonnet-4-5"    # System design, pattern evaluation, scalability analysis
    medium_complexity: "claude-sonnet-4-0"  # Technology assessment, documentation generation
    low_complexity: "claude-3-5-haiku-latest"      # Simple queries, standard documentation

  cost_optimization:
    prefer_cheaper: false        # Architect prioritizes design quality over cost
    fallback_on_rate_limit: true
    budget_cap_per_hour: 300     # Higher budget for complex architectural reasoning

# Architectural standards and preferences
architectural_standards:
  preferred_patterns:
    - "microservices"           # For high-scale systems
    - "event_driven"            # For complex workflows
    - "modular_monolith"        # For medium-scale systems
    - "domain_driven_design"    # For complex business logic

  documentation_requirements:
    format: "c4_model"          # C4 model for architectural documentation
    include_adrs: true          # Always include Architectural Decision Records
    diagram_tools: ["PlantUML", "Mermaid", "Draw.io"]
    update_frequency: "per_major_change"

  technology_preferences:
    languages: ["Python", "Go", "TypeScript", "Rust"]
    databases: ["PostgreSQL", "MongoDB", "Redis"]
    messaging: ["Apache Kafka", "RabbitMQ", "Redis Pub/Sub"]
    containers: ["Docker", "Kubernetes"]
    monitoring: ["Prometheus", "Grafana", "Jaeger"]

  quality_gates:
    scalability_analysis: true   # Always perform scalability analysis
    security_review: true        # Include security considerations
    performance_modeling: true   # Model expected performance
    cost_analysis: true          # Analyze operational costs

# Design methodology and process
design_process:
  requirements_analysis:
    functional_requirements: true    # Analyze functional needs
    non_functional_requirements: true # Performance, security, scalability
    constraints_identification: true  # Budget, timeline, team constraints
    stakeholder_mapping: true        # Identify key stakeholders

  solution_approach:
    pattern_evaluation: true         # Evaluate multiple architectural patterns
    technology_assessment: true      # Assess technology options
    trade_off_analysis: true        # Document architectural trade-offs
    risk_assessment: true           # Identify and mitigate risks

  documentation_standards:
    system_context: "required"       # C4 Level 1 - System Context
    container_view: "required"       # C4 Level 2 - Container Diagram
    component_view: "recommended"    # C4 Level 3 - Component Diagram
    code_view: "optional"           # C4 Level 4 - Code Diagram

# Integration and collaboration settings
integrations:
  synapse_enabled: true            # Use Synapse for architectural patterns
  team_collaboration: true        # Coordinate with development teams
  stakeholder_communication: true  # Regular stakeholder updates
  decision_tracking: true         # Track all architectural decisions

  synapse_integration:
    pattern_discovery: true        # Search architectural patterns
    best_practices: true          # Access best practices
    technology_research: true     # Research technology options
    case_studies: true           # Learn from case studies

  agent_coordination:
    project_manager: true         # Coordinate with project manager
    tech_leads: true             # Work with technical leads
    security_specialist: true    # Collaborate on security architecture
    devops_engineer: true        # Align on deployment architecture

# Pattern evaluation criteria
evaluation_criteria:
  scalability:
    horizontal_scaling: "high_priority"    # Ability to scale out
    vertical_scaling: "medium_priority"    # Ability to scale up
    auto_scaling: "high_priority"         # Automatic scaling capability

  maintainability:
    code_organization: "high_priority"     # Clear code structure
    testing_strategy: "high_priority"     # Comprehensive testing
    documentation: "high_priority"        # Thorough documentation

  performance:
    response_time: "high_priority"        # Fast response times
    throughput: "high_priority"           # High request throughput
    resource_efficiency: "medium_priority" # Efficient resource usage

  reliability:
    fault_tolerance: "high_priority"      # Handle failures gracefully
    disaster_recovery: "medium_priority"  # Recovery capabilities
    monitoring: "high_priority"           # Comprehensive monitoring

# Technology assessment framework
technology_assessment:
  evaluation_factors:
    team_expertise: 0.25         # Team's familiarity with technology
    community_support: 0.15     # Community and ecosystem strength
    performance: 0.20           # Performance characteristics
    scalability: 0.20           # Scaling capabilities
    security: 0.10             # Security features and track record
    cost: 0.10                 # Total cost of ownership

  decision_matrix:
    must_have: ["security", "scalability", "maintainability"]
    nice_to_have: ["performance", "cost_efficiency", "team_familiarity"]
    deal_breakers: ["security_issues", "no_support", "vendor_lock_in"]

# Communication and reporting
communication:
  stakeholder_updates:
    frequency: "weekly"          # Regular update frequency
    format: "executive_summary"  # High-level summary format
    include_risks: true         # Always include risk assessment
    include_timeline: true      # Include implementation timeline

  technical_documentation:
    audience: "development_teams"  # Primary audience
    detail_level: "comprehensive" # Level of technical detail
    update_triggers: ["major_decisions", "pattern_changes", "technology_changes"]

  decision_records:
    format: "adr"               # Architectural Decision Records
    required_sections: ["context", "decision", "consequences"]
    review_process: "peer_review" # Decision review process
    retention: "permanent"       # Keep all decisions permanently

# Quality assurance and validation
validation:
  architecture_reviews:
    peer_review: true           # Peer review of designs
    stakeholder_validation: true # Validate with stakeholders
    prototype_validation: false  # Build prototypes for validation
    load_testing: false         # Performance validation

  compliance_checks:
    security_standards: true    # Check security compliance
    performance_requirements: true # Validate performance needs
    scalability_requirements: true # Check scalability needs
    organizational_standards: true # Align with org standards

# Learning and improvement
continuous_improvement:
  pattern_effectiveness: true   # Track pattern success
  technology_outcomes: true    # Monitor technology choices
  decision_quality: true       # Evaluate decision quality
  stakeholder_satisfaction: true # Measure stakeholder satisfaction

  knowledge_sharing:
    internal_documentation: true # Share learnings internally
    pattern_library: true       # Contribute to pattern library
    case_studies: true         # Document case studies
    best_practices: true       # Share best practices

# Advanced features
advanced_capabilities:
  system_modeling: true        # Create system models
  capacity_planning: true     # Plan system capacity
  migration_strategies: true  # Plan system migrations
  vendor_evaluation: true     # Evaluate technology vendors

# Performance and optimization
performance:
  design_time_limit: "4_hours"   # Maximum time for initial design
  iteration_cycles: 3           # Maximum design iterations
  stakeholder_feedback_window: "48_hours" # Feedback collection window
  decision_documentation_time: "2_hours"  # Time to document decisions