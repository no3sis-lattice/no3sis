# Git Workflow Agent Configuration
# Specialized git workflow automation with Synapse System integration

agent:
  name: "git-workflow"
  version: "1.0.0"
  description: "Intelligent git workflow automation with organizational pattern integration"

  # Model selection - Sonnet for standard git operations, Haiku for simple tasks
  model_preference:
    primary: "claude-sonnet-4-0"        # Standard git operations and workflow automation
    fallback: "claude-3-5-haiku-latest"        # Simple status checks and basic commands
    simple_tasks: "claude-3-5-haiku-latest"    # File listing, status queries

  complexity_routing:
    high_complexity: "sonnet"    # Complex workflows, merge conflict resolution
    medium_complexity: "sonnet"  # Standard branch management, PR creation
    low_complexity: "haiku"      # Status checks, simple git commands

  cost_optimization:
    prefer_cheaper: true         # Use cost-effective models when possible
    fallback_on_rate_limit: true
    budget_cap_per_hour: 50      # Moderate budget for git operations

# Git conventions following Agent OS standards
git_conventions:
  commit_format: "conventional"        # Use conventional commit format
  branch_naming: "kebab-case"         # Use kebab-case for branch names
  default_target_branch: "main"      # Default PR target branch
  require_pr: true                    # Always create PRs for features
  auto_extract_branch_names: true    # Extract branch names from spec folders

  # Commit message standards
  commit_rules:
    max_length: 72                    # Maximum commit message length
    require_type: true                # Require conventional commit types
    allowed_types: ["feat", "fix", "docs", "style", "refactor", "test", "chore", "build", "ci"]
    require_imperative: true          # Use imperative mood
    no_period_ending: true           # Don't end with period

  # Branch naming rules
  branch_rules:
    remove_date_prefixes: true       # Remove YYYY-MM-DD prefixes from spec folders
    max_length: 50                   # Maximum branch name length
    allowed_prefixes: ["feature", "hotfix", "bugfix", "chore", "docs"]
    require_descriptive: true       # Branch names must be descriptive

# Workflow automation settings
workflow_rules:
  auto_push: true                    # Automatically push branches to remote
  create_pr_on_completion: true     # Create PR at end of workflow
  cleanup_branches: false           # Don't auto-delete merged branches
  require_tests: true               # Require test status in PRs
  auto_stage_changes: true          # Stage all changes by default

  # Safety checks
  safety_checks:
    check_uncommitted_before_switch: true    # Check for uncommitted changes
    verify_remote_exists: true               # Verify remote repo exists
    prevent_force_push: true                # Prevent accidental force pushes
    confirm_destructive_operations: true    # Ask before destructive ops

  # Workflow-specific settings
  feature_workflow:
    auto_create_branch: true         # Auto-create feature branches
    require_spec_reference: false   # Spec reference not mandatory
    default_reviewers: []            # No default reviewers

  hotfix_workflow:
    require_urgent_label: true       # Add urgent label to hotfix PRs
    notify_stakeholders: true        # Notify relevant stakeholders
    fast_track_review: true         # Request expedited review

  release_workflow:
    require_clean_state: true        # Require clean working directory
    create_tags: true               # Automatically create version tags
    update_changelog: false         # Don't auto-update changelog

# Pull request templates and settings
pull_request:
  default_template:
    include_summary: true           # Include summary section
    include_changes: true          # List changes made
    include_testing: true          # Include testing information
    include_related: true          # Include related issues/specs

  auto_content:
    link_issues: true              # Auto-link related issues
    include_file_changes: true     # List modified files
    add_test_status: true          # Add test status if available
    reference_spec: true           # Reference spec folder if available

  labels:
    auto_assign: true              # Auto-assign relevant labels
    feature_label: "enhancement"    # Label for feature PRs
    hotfix_label: "urgent"         # Label for hotfix PRs
    documentation_label: "docs"    # Label for documentation PRs

# Integration settings
integrations:
  synapse_enabled: true            # Use Synapse for standards and patterns
  github_cli_required: true       # Require gh CLI for PR creation
  git_hooks: false                # Git hooks integration disabled
  ci_integration: true            # Integrate with CI/CD systems

  # Synapse integration details
  synapse:
    fetch_commit_conventions: true    # Get commit conventions from Synapse
    fetch_branch_rules: true          # Get branch naming rules from Synapse
    fetch_pr_templates: true          # Get PR templates from Synapse
    publish_workflow_metrics: true   # Share workflow metrics with Synapse

  # Agent coordination
  agents:
    coordinate_with_pm: true          # Coordinate with project manager
    notify_code_hound: true          # Notify code hound for quality checks
    request_reviews: true            # Request reviews from specialists

# Error handling and recovery
error_handling:
  merge_conflicts:
    auto_resolve: false             # Don't auto-resolve conflicts
    notify_user: true              # Always notify user of conflicts
    suggest_resolution: true       # Provide resolution suggestions

  failed_pushes:
    auto_retry: true               # Retry failed pushes
    pull_before_retry: true        # Pull latest changes before retry
    max_retries: 3                 # Maximum retry attempts

  network_issues:
    retry_on_timeout: true         # Retry on network timeouts
    timeout_seconds: 30            # Command timeout duration
    fallback_to_local: true        # Use local operations if remote fails

# Repository analysis and recommendations
analysis:
  check_repository_health: true    # Analyze repository health
  suggest_optimizations: true      # Suggest workflow optimizations
  track_workflow_metrics: true     # Track workflow performance metrics
  identify_patterns: true          # Identify common workflow patterns

# Logging and monitoring
logging:
  enabled: true
  level: "INFO"                    # Log level (DEBUG, INFO, WARN, ERROR)
  include_commands: true           # Log git commands executed
  include_timings: true           # Log operation timings
  max_log_size: "10MB"           # Maximum log file size

# Advanced features
advanced:
  parallel_operations: false       # Don't run git operations in parallel
  cache_git_status: true          # Cache git status for performance
  smart_commit_messages: true     # Enhance commit messages intelligently
  workflow_templates: true        # Use workflow templates

# File patterns and exclusions
file_handling:
  auto_stage_patterns:
    - "*.py"
    - "*.js"
    - "*.ts"
    - "*.md"
    - "*.yml"
    - "*.yaml"
    - "*.json"

  ignore_patterns:
    - "*.log"
    - "*.tmp"
    - ".DS_Store"
    - "node_modules/"
    - "__pycache__/"
    - ".env"
    - "*.secret"

# Workflow shortcuts and aliases
shortcuts:
  quick_commit: "commit with auto-generated message"
  feature_start: "create feature branch and switch"
  hotfix_deploy: "complete hotfix workflow with urgent PR"
  status_check: "comprehensive repository status"

# Performance optimization
performance:
  command_timeout: 30              # Default command timeout (seconds)
  max_concurrent_operations: 1     # No concurrent git operations
  cache_branch_list: true         # Cache branch list for 60 seconds
  optimize_large_repos: true      # Special handling for large repositories