# Documentation Writer Agent Configuration
# Controls documentation generation and formatting behavior

# Agent Metadata
agent:
  name: "docs-writer"
  version: "1.0.0"
  description: "Intelligent documentation generation and maintenance"

# Model Selection - Sonnet for content generation
model:
  primary: "claude-sonnet-4-0"        # Content generation and writing
  fallback: "claude-3-5-haiku-latest"        # Simple formatting tasks
  complexity_routing:
    content_generation: "sonnet"    # Writing and documentation creation
    formatting: "haiku"            # Basic formatting operations
    validation: "haiku"            # Content validation tasks

# Operation Modes
modes:
  interactive: true               # Single request-response mode
  batch_mode: true               # Support multiple file processing
  auto_format: true              # Automatic formatting application

# Documentation Generation
generation:
  default_format: "markdown"      # Default output format
  auto_detect_language: true      # Auto-detect programming languages
  include_examples: true          # Include code examples where possible
  extract_docstrings: true        # Extract existing docstrings

  # Supported documentation types
  supported_types:
    - "api"
    - "readme"
    - "user-guide"
    - "tutorial"
    - "reference"
    - "changelog"

# Content Processing
content:
  max_content_length: 100000      # Maximum content length to process
  preserve_formatting: true       # Preserve original formatting when possible
  auto_fix_headers: true         # Fix heading hierarchy
  validate_links: true           # Validate link formats

  # Language-specific settings
  languages:
    python:
      extract_docstrings: true
      include_type_hints: true
    javascript:
      include_jsdoc: true
      extract_comments: true
    typescript:
      include_interfaces: true
      extract_types: true
    rust:
      include_doc_comments: true
      extract_examples: true

# Formatting Options
formatting:
  markdown:
    use_setext_headers: false     # Use # headers instead of underline
    code_fence_language: true     # Include language in code fences
    table_format: "github"       # GitHub-flavored markdown tables
    line_length: 80              # Target line length

  html:
    include_css: false           # Don't include CSS styling
    semantic_markup: true       # Use semantic HTML elements

  rst:
    max_line_length: 79         # reStructuredText line length
    use_code_blocks: true       # Use code-block directive

# Template System
templates:
  use_synapse_templates: true     # Query Synapse for templates
  cache_templates: true          # Cache frequently used templates
  template_cache_ttl: 7200      # Template cache TTL in seconds

  # Default template preferences
  preferred_templates:
    api: "api-documentation-template"
    readme: "project-readme-template"
    tutorial: "step-by-step-tutorial-template"

# Style Guide Integration
style_guides:
  enforce_style: true            # Apply style guide rules
  default_domain: "technical"    # Default style guide domain
  check_grammar: false          # Grammar checking (if available)

  # Style preferences
  writing_style:
    tone: "professional"         # professional, casual, technical
    voice: "active"             # active, passive
    person: "second"            # first, second, third

# Validation Rules
validation:
  check_markdown_syntax: true    # Validate markdown syntax
  verify_code_blocks: true      # Check code block formatting
  validate_headings: true       # Check heading hierarchy
  check_link_format: true       # Validate link syntax

  # Error handling
  strict_mode: false            # Strict validation mode
  auto_fix_issues: true        # Attempt to fix common issues

# File Processing
files:
  supported_extensions:
    - ".md"
    - ".rst"
    - ".txt"
    - ".py"
    - ".js"
    - ".ts"
    - ".rs"
    - ".go"
    - ".java"

  output_extensions:
    - ".md"
    - ".html"
    - ".rst"
    - ".txt"

  backup_originals: false       # Don't backup original files
  create_in_place: false       # Don't modify files in place

# API Documentation
api_docs:
  include_parameters: true       # Document function parameters
  include_return_values: true   # Document return values
  include_examples: true        # Include usage examples
  group_by_module: true        # Group functions by module

  # Language-specific API settings
  python:
    include_decorators: true
    extract_type_hints: true
  javascript:
    include_async_info: true
    extract_jsdoc_tags: true

# README Generation
readme:
  include_installation: true     # Include installation section
  include_usage: true           # Include usage section
  include_examples: true        # Include example code
  include_license: true         # Include license information
  auto_detect_features: true    # Auto-detect project features

  # Section ordering
  section_order:
    - "title"
    - "description"
    - "installation"
    - "usage"
    - "api"
    - "examples"
    - "contributing"
    - "license"

# Synapse Integration
synapse:
  use_templates: true           # Use Synapse template system
  use_style_guides: true       # Query Synapse for style guides
  auto_activate: true          # Auto-activate Synapse if needed
  timeout: 30                  # Synapse query timeout

# Performance Settings
performance:
  max_concurrent_files: 3       # Maximum files to process concurrently
  chunk_large_files: true      # Process large files in chunks
  chunk_size: 10000            # Characters per chunk

# Output Settings
output:
  verbose_logging: false        # Detailed operation logging
  show_statistics: true        # Show generation statistics
  include_metadata: false      # Include generation metadata

# Development Settings
development:
  mock_mode: false             # Use mock implementations
  debug_templates: false       # Debug template processing
  save_intermediates: false    # Save intermediate processing steps