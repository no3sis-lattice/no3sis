# Python Specialist Agent Configuration
# Advanced Python development analysis and optimization

# Agent Metadata
agent:
  name: "python-specialist"
  version: "1.0.0"
  description: "Advanced Python development analysis and optimization"

# Model Selection - Sonnet for code analysis
model:
  primary: "claude-sonnet-4-0"      # Standard Python analysis
  fallback: "claude-3-5-haiku-latest"        # Simple syntax checks
  complexity_routing:
    code_analysis: "sonnet-4-0"     # Complex code analysis
    syntax_check: "haiku-latest"    # Basic syntax validation
    pattern_matching: "sonnet-4-0" # Pattern discovery and suggestions
    type_analysis: "sonnet-4-0"    # Type hint analysis
    performance_analysis: "sonnet-4-0" # Performance bottleneck detection

# Python Version Support
python:
  target_versions: ["3.10", "3.11", "3.12"]
  default_version: "3.10"
  modern_features: true           # Use modern Python features
  backwards_compatibility: false  # Don't prioritize old Python versions

# Code Quality Standards
quality:
  enforce_pep8: true             # Enforce PEP 8 standards
  line_length: 88                # Black's default (not 79)
  use_type_hints: true           # Require type hints
  docstring_style: "google"      # Google-style docstrings
  import_sorting: "isort"        # Use isort for import organization

  # Quality thresholds
  complexity_threshold: 10        # Maximum cyclomatic complexity
  function_length_threshold: 50   # Maximum function length
  class_size_threshold: 20        # Maximum methods per class

# Type Checking Configuration
typing:
  enable_mypy_integration: true   # Integrate with mypy
  strict_mode: false             # Don't use mypy strict mode
  allow_any: false               # Discourage Any usage
  require_return_types: true     # Require return type annotations

  # Type inference settings
  infer_from_usage: true         # Infer types from usage patterns
  suggest_generics: true         # Suggest generic types
  suggest_protocols: true        # Suggest Protocol usage

# Performance Analysis
performance:
  enable_profiling: true         # Enable performance analysis
  detect_antipatterns: true     # Detect performance anti-patterns
  suggest_optimizations: true   # Suggest performance improvements

  # Analysis depth
  analyze_loops: true            # Analyze loop efficiency
  analyze_memory: true           # Check memory usage patterns
  analyze_io: true              # Check I/O patterns
  analyze_algorithms: true       # Analyze algorithmic complexity

# Testing Configuration
testing:
  preferred_framework: "pytest"  # Default test framework
  coverage_threshold: 80         # Minimum coverage percentage
  generate_stubs: true           # Generate test stubs
  suggest_patterns: true         # Suggest testing patterns

  # Test types to analyze
  analyze_unit_tests: true       # Analyze unit test patterns
  analyze_integration_tests: true # Analyze integration tests
  analyze_fixtures: true         # Analyze test fixtures
  check_mocking: true           # Check mocking patterns

# Framework-Specific Settings
frameworks:
  fastapi:
    check_async_patterns: true   # Check async route patterns
    validate_pydantic: true      # Validate Pydantic models

  django:
    check_model_patterns: true   # Check Django model patterns
    validate_migrations: true    # Check migration patterns

  flask:
    check_blueprint_usage: true  # Check Blueprint patterns
    validate_routes: true        # Validate route definitions

# Refactoring Suggestions
refactoring:
  suggest_dataclasses: true     # Suggest dataclass usage
  suggest_pathlib: true         # Suggest pathlib over os.path
  suggest_fstring: true         # Suggest f-strings over format
  suggest_comprehensions: true  # Suggest comprehensions over loops
  suggest_context_managers: true # Suggest context managers
  suggest_modern_patterns: true # Suggest modern Python patterns

# Code Analysis Depth
analysis:
  deep_analysis: true           # Perform deep code analysis
  cross_function_analysis: true # Analyze function interactions
  dependency_analysis: true     # Analyze import dependencies
  security_analysis: true       # Basic security pattern analysis

  # Analysis categories
  analyze_naming: true          # Check naming conventions
  analyze_structure: true       # Check code structure
  analyze_patterns: true        # Check design patterns
  analyze_documentation: true   # Check documentation coverage

# Synapse Integration
synapse:
  use_python_patterns: true     # Search Python patterns
  use_standards: true          # Search coding standards
  auto_activate: true          # Auto-activate Synapse
  cache_patterns: true         # Cache pattern searches
  pattern_cache_ttl: 3600      # Pattern cache TTL

  # Search configuration
  max_patterns: 10             # Maximum patterns to retrieve
  relevance_threshold: 0.6     # Minimum relevance score
  include_examples: true       # Include code examples

# Error Handling and Reporting
error_handling:
  graceful_degradation: true   # Continue on non-critical errors
  detailed_error_messages: true # Provide detailed error information
  suggest_fixes: true          # Suggest fixes for errors

# Language Features to Emphasize
modern_python:
  pattern_matching: true       # Emphasize match/case statements
  union_types: true           # Use X | Y instead of Union[X, Y]
  dataclasses: true           # Prefer dataclasses over plain classes
  pathlib: true               # Prefer pathlib over os.path
  f_strings: true             # Prefer f-strings over .format()
  walrus_operator: true       # Suggest := where appropriate

# Cross-Project Adaptability
adaptability:
  detect_project_type: true    # Auto-detect project type
  adapt_suggestions: true      # Adapt to project context
  respect_existing_style: true # Respect existing code style

  # Context awareness
  primary_language_detection: true  # Detect if Python is primary language
  script_vs_application: true      # Different advice for scripts vs apps
  library_vs_application: true     # Different advice for libraries vs apps

# Performance Settings
performance_config:
  max_file_size: 100000        # Maximum file size to analyze (bytes)
  timeout_seconds: 30          # Analysis timeout
  concurrent_analysis: true    # Analyze multiple files concurrently
  max_concurrent: 3           # Maximum concurrent analyses

# Development Settings
development:
  mock_mode: false            # Use mock implementations
  debug_analysis: false       # Debug analysis steps
  save_analysis_cache: false  # Save analysis results
  verbose_logging: false      # Verbose operation logging