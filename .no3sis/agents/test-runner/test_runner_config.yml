# Test Runner Agent Configuration
# Controls test execution and analysis behavior

# Agent Metadata
agent:
  name: "test-runner"
  version: "1.0.0"
  description: "Intelligent test execution and failure analysis"

# Model Selection - Sonnet for test analysis
model:
  primary: "claude-sonnet-4-0"        # Test analysis and reporting
  fallback: "claude-3-5-haiku-latest"        # Simple test execution
  complexity_routing:
    execution: "haiku"              # Basic test running
    analysis: "sonnet"              # Failure analysis and patterns
    reporting: "sonnet"             # Coverage and comprehensive reports

# Operation Modes
modes:
  interactive: true               # Single request-response mode
  batch_mode: true               # Support multiple test runs
  failure_focus: true            # Focus on failure analysis

# Test Execution
execution:
  auto_detect_framework: true     # Automatically detect test framework
  timeout_seconds: 300           # Default test timeout (5 minutes)
  max_retries: 1                 # Retry failed tests once
  parallel_execution: false      # Run tests sequentially by default

  # Framework-specific settings
  frameworks:
    pytest:
      default_args: ["-v", "--tb=short"]
      coverage_command: "pytest --cov"
    jest:
      default_args: ["--verbose"]
      coverage_command: "jest --coverage"
    vitest:
      default_args: ["--reporter=verbose"]
      coverage_command: "vitest --coverage"
    cargo:
      default_args: ["--", "--nocapture"]
      coverage_command: "cargo tarpaulin"
    go:
      default_args: ["-v"]
      coverage_command: "go test -cover"

# Failure Analysis
analysis:
  enable_pattern_detection: true  # Detect failure patterns
  group_similar_failures: true   # Group related failures
  suggest_fixes: true            # Provide fix suggestions
  max_failures_analyzed: 20      # Limit detailed analysis

  # Analysis depth
  analysis_levels:
    basic: ["error_type", "location"]
    detailed: ["error_type", "location", "context", "suggestions"]
    comprehensive: ["error_type", "location", "context", "suggestions", "patterns", "related_failures"]

  default_level: "detailed"

# Output Formatting
output:
  format: "structured"           # structured, minimal, verbose
  show_passing_summary: true     # Show passing test summary
  show_execution_time: true     # Include execution times
  truncate_long_output: true    # Truncate very long outputs
  max_output_length: 1000       # Maximum characters in output

  # Failure reporting
  failure_format:
    show_location: true
    show_expected_actual: true
    show_stack_trace: false      # Don't show full stack traces
    show_fix_suggestions: true

# Coverage Reporting
coverage:
  enable: true                   # Enable coverage reporting
  threshold_warning: 70          # Warn below 70% coverage
  threshold_error: 50           # Error below 50% coverage
  show_missing_lines: false     # Don't show missing line details

  # Coverage formats
  formats:
    - "summary"                  # Overall percentage
    - "by_file"                 # Per-file breakdown (if available)

# Test Discovery
discovery:
  auto_find_tests: true         # Automatically find test files
  test_patterns:
    python: ["test_*.py", "*_test.py"]
    javascript: ["*.test.js", "*.spec.js"]
    typescript: ["*.test.ts", "*.spec.ts"]
    rust: ["**/tests/*.rs", "**/*_test.rs"]
    go: ["*_test.go"]

  exclude_patterns:
    - "node_modules"
    - "__pycache__"
    - ".git"
    - "target"
    - "build"
    - "dist"

# Framework Detection
detection:
  detection_order:
    - "cargo"      # Rust (check Cargo.toml)
    - "go"         # Go (check go.mod)
    - "pytest"     # Python (check for pytest config)
    - "jest"       # JavaScript (check package.json)
    - "vitest"     # Modern JS testing
    - "maven"      # Java (check pom.xml)
    - "gradle"     # Java/Kotlin (check build.gradle)

  # Framework-specific detection
  detection_files:
    pytest: ["pytest.ini", "pyproject.toml", "setup.cfg"]
    jest: ["jest.config.js", "jest.config.json", "package.json"]
    vitest: ["vitest.config.js", "vitest.config.ts"]
    cargo: ["Cargo.toml"]
    go: ["go.mod"]
    maven: ["pom.xml"]
    gradle: ["build.gradle", "build.gradle.kts"]

# Synapse Integration
synapse:
  use_test_patterns: true        # Search for testing patterns
  use_failure_solutions: true   # Query failure solutions
  auto_activate: true           # Auto-activate Synapse if needed
  timeout: 30                   # Synapse query timeout

  # Pattern search settings
  pattern_search:
    max_results: 10
    relevance_threshold: 0.5

  # Solution search settings
  solution_search:
    max_results: 5
    applicability_threshold: 0.7

# Error Handling
error_handling:
  continue_on_framework_error: true    # Continue if framework detection fails
  fallback_to_generic: true          # Use generic parsing if framework-specific fails
  log_parsing_errors: true           # Log output parsing errors

# Performance Settings
performance:
  cache_framework_detection: true    # Cache framework detection results
  cache_test_discovery: true        # Cache test file discovery
  parallel_analysis: false          # Analyze failures sequentially

# Language-Specific Settings
languages:
  python:
    preferred_framework: "pytest"
    include_doctest: false
    virtual_env_activation: true

  javascript:
    preferred_framework: "jest"
    include_tsx_jsx: true
    node_env: "test"

  typescript:
    preferred_framework: "vitest"
    compile_before_test: false

  rust:
    cargo_features: []
    release_mode: false

  go:
    module_mode: true
    race_detection: false

# Reporting
reports:
  generate_summary: true           # Generate test run summary
  save_results: false             # Don't save results to file
  include_metadata: true          # Include execution metadata

  # Report sections
  summary_sections:
    - "execution_info"
    - "pass_fail_counts"
    - "failure_analysis"
    - "coverage_summary"
    - "recommendations"

# Development Settings
development:
  mock_mode: false               # Use mock implementations
  debug_framework_detection: false  # Debug framework detection
  verbose_parsing: false         # Verbose output parsing
  save_raw_output: false        # Save raw test output for debugging