# DevOps Engineer Agent Configuration
# Controls infrastructure, deployment, and monitoring behavior

# Agent Metadata
agent:
  name: "devops-engineer"
  version: "1.0.0"
  description: "Infrastructure, Deployment, and Operations Specialist"
  model_preference:
    primary: "claude-sonnet-4-5"    # Latest Sonnet for complex DevOps tasks
    fallback: "claude-sonnet-4-0"   # Claude 4.0 Sonnet fallback
    simple_tasks: "claude-3-5-haiku-latest" # Latest Haiku for simple operations

# Operation Modes
modes:
  interactive: true          # Single request-response mode
  autonomous: false          # Continuous monitoring mode (future)
  daemon: false             # Background service mode (future)

# Model Selection Strategy
model_routing:
  high_complexity: "claude-sonnet-4-5"  # Multi-step deployments, complex configs
  medium_complexity: "claude-sonnet-4-0"  # Standard DevOps tasks
  low_complexity: "claude-3-5-haiku-latest"     # Simple operations and status checks

# Infrastructure Management
infrastructure:
  default_cloud_provider: "aws"
  supported_providers:
    - "aws"
    - "gcp"
    - "azure"
    - "terraform"

  terraform:
    state_backend: "s3"
    plan_timeout: 300
    apply_timeout: 900

  kubernetes:
    default_namespace: "default"
    kubectl_timeout: 60
    health_check_retries: 3

# Container Management
containers:
  docker:
    build_timeout: 600
    registry_push: true
    security_scan: true
    multi_stage_preferred: true

  default_base_images:
    python: "python:3.11-slim"
    node: "node:18-alpine"
    java: "openjdk:11-jre-slim"
    go: "golang:1.20-alpine"
    rust: "rust:1.70"

  security:
    scan_on_build: true
    fail_on_critical: true
    max_vulnerabilities:
      critical: 0
      high: 5
      medium: 20

# Deployment Configuration
deployment:
  strategies:
    default: "rolling"
    supported: ["blue-green", "canary", "rolling"]

  blue_green:
    switch_delay: 30          # seconds
    health_check_timeout: 120
    rollback_on_failure: true

  canary:
    initial_traffic: 10       # percentage
    increment_step: 20
    success_threshold: 0.99

  rolling:
    max_unavailable: "25%"
    max_surge: "25%"

  validation:
    health_checks: true
    smoke_tests: true
    load_testing: false       # Enable for production
    security_scans: true

# CI/CD Pipeline Settings
cicd:
  preferred_platforms:
    - "github-actions"
    - "gitlab-ci"
    - "jenkins"

  pipeline_stages:
    - "build"
    - "test"
    - "security-scan"
    - "deploy"
    - "post-deploy-validation"

  quality_gates:
    test_coverage: 80
    security_score: 85
    performance_threshold: 200  # ms response time

  artifact_retention: "30d"

# Monitoring and Observability
monitoring:
  default_stack: "prometheus"
  supported_stacks:
    - "prometheus"
    - "elasticsearch"
    - "datadog"
    - "newrelic"

  prometheus:
    scrape_interval: "15s"
    retention: "30d"
    alertmanager: true
    grafana: true

  health_checks:
    timeout: 30
    retries: 3
    interval: 60

  alerting:
    notification_delay: "5m"
    escalation_levels: 3
    channels: ["email", "slack"]

  sla_targets:
    availability: 0.999       # 99.9%
    response_time: 200        # ms
    error_rate: 0.001        # 0.1%

# Security Settings
security:
  vulnerability_scanning: true
  compliance_checks: true
  secrets_management: true

  scanning:
    container_images: true
    infrastructure_code: true
    dependencies: true

  compliance_standards:
    - "cis"
    - "nist"
    - "pci-dss"

  secrets:
    rotation_interval: "90d"
    encryption_at_rest: true
    access_logging: true

# Cost Management
cost:
  optimization: true
  budgets:
    monthly_limit: 5000       # USD
    alert_threshold: 0.8      # 80% of budget

  resource_tagging: true
  right_sizing: true
  unused_resource_detection: true

# Integration Settings
integration:
  use_synapse_graph: true     # Query DevOps knowledge
  pattern_sharing: true       # Share deployment patterns
  auto_activate_synapse: true

  external_tools:
    terraform: true
    kubectl: true
    docker: true
    helm: true
    ansible: false

# File Processing
files:
  supported_configs:
    - "Dockerfile"
    - "docker-compose.yml"
    - "*.tf"                  # Terraform
    - "*.tfvars"
    - "*.yml"                 # YAML configs
    - "*.yaml"
    - "Jenkinsfile"
    - ".github/workflows/*"

  exclude_paths:
    - "node_modules"
    - ".terraform"
    - ".git"
    - "venv"
    - "__pycache__"
    - "build"
    - "dist"

# Performance Settings
performance:
  max_concurrent_operations: 5
  timeout_seconds: 300
  rate_limit_requests: 20

  deployment_timeouts:
    container_build: 600
    service_deployment: 900
    infrastructure_provision: 1800

# Notification Settings
notifications:
  deployment_success: true
  deployment_failure: true
  security_alerts: true
  cost_alerts: true
  sla_violations: true

  channels:
    email:
      enabled: true
      recipients: ["devops@company.com"]
    slack:
      enabled: false
      webhook_url: ""
      channel: "#devops"

# Environment Configuration
environments:
  development:
    auto_deploy: true
    security_level: "relaxed"
    monitoring_level: "basic"

  staging:
    auto_deploy: false
    security_level: "standard"
    monitoring_level: "comprehensive"
    approval_required: false

  production:
    auto_deploy: false
    security_level: "strict"
    monitoring_level: "comprehensive"
    approval_required: true
    backup_before_deploy: true

# Logging and Debugging
logging:
  level: "INFO"
  verbose_deployment: false
  save_deployment_logs: true
  retention_days: 30

  debug:
    dry_run_mode: false
    mock_external_services: false
    detailed_timing: false

# Backup and Recovery
backup:
  configuration_backup: true
  state_backup: true
  backup_interval: "24h"
  retention_period: "30d"

  disaster_recovery:
    multi_region: false
    auto_failover: false
    rto_target: "1h"          # Recovery Time Objective
    rpo_target: "15m"         # Recovery Point Objective