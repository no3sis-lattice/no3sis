# Synapse Project Manager Configuration
# Enhanced orchestrator with Pneuma compression principles

agent:
  name: synapse-project-manager
  version: "1.0.0"
  description: "Master network orchestrator with context density maximization"

  # Model selection for orchestration complexity
  model_preference:
    primary: "claude-sonnet-4-5"      # Latest Sonnet for multi-agent orchestration
    fallback: "claude-sonnet-4-0"     # Sonnet 4.0 fallback
    simple_tasks: "claude-3-5-haiku-latest"  # Basic task routing

  # Dynamic model routing based on task complexity
  complexity_routing:
    high_complexity: "sonnet-4-5"     # Multi-agent coordination, dependency resolution
    medium_complexity: "sonnet-4-0"   # Standard workflows, agent delegation
    low_complexity: "haiku-latest"    # Simple task routing, status updates

  cost_optimization:
    prefer_cheaper: true       # Use cheaper models when possible
    fallback_on_rate_limit: true
    budget_cap_per_hour: 200   # Dollar limit for orchestration

# Orchestration Configuration
orchestration:
  # Resource limits
  max_parallel_agents: 5
  max_concurrent_workflows: 3
  timeout_per_agent: 300      # 5 minutes default
  global_timeout: 1800        # 30 minutes maximum

  # Context compression (Pneuma principle)
  context_density: 0.8        # Target compression ratio
  max_context_size: 2000      # Characters
  symbolic_notation: true     # Use dense symbolic representation

  # Coordination efficiency
  minimize_communication: true
  batch_similar_tasks: true
  optimize_dependency_graph: true

  # Failure handling
  retry_on_failure: true
  max_retries: 3
  fallback_strategies: ["simplify_workflow", "reduce_parallelism", "sequential_execution"]
  graceful_degradation: true

# Workflow Templates (Compressed Notation)
workflows:
  # Standard patterns with symbolic notation
  feat: ["@arch", "@dev", "@test", "@hound", "@4Q", "@docs", "@git"]  # Feature pipeline
  bug:  ["@test", "@dev", "@test", "@git"]                           # Bug fix
  ref:  ["@test", "@dev", "@test", "@hound", "@4Q"]                 # Refactoring
  arch: ["@arch", "@security", "@devops", "@docs"]                  # Architecture
  qual: ["@hound", "@4Q", "@test", "@security"]                     # Quality audit

  # Parallel execution opportunities
  parallel_streams:
    feat: [["@arch", "@docs"], ["@dev", "@test"]]  # Design & docs || Dev & test
    arch: [["@security", "@devops"]]               # Security & infrastructure
    qual: [["@hound", "@security"], ["@4Q", "@test"]]  # Quality & security || Compression & test

  # Custom workflow parameters
  workflow_params:
    feat:
      estimated_duration: 45    # minutes
      complexity_factors: ["feature_scope", "integration_complexity", "testing_requirements"]
      success_criteria: ["implementation_complete", "tests_pass", "docs_updated"]

    bug:
      estimated_duration: 20
      complexity_factors: ["bug_severity", "root_cause_depth", "impact_scope"]
      success_criteria: ["bug_reproduced", "fix_implemented", "regression_tests_pass"]

    ref:
      estimated_duration: 35
      complexity_factors: ["code_complexity", "abstraction_opportunities", "quality_targets"]
      success_criteria: ["quality_improved", "patterns_abstracted", "tests_maintained"]

# Agent Network Topology
agents:
  # Core specialists with model assignments
  specialists:
    architect:
      name: "@architect"
      model: "sonnet-4-5"
      capabilities: ["system_design", "technical_vision", "architecture_patterns"]
      timeout: 600  # Complex design work needs more time

    rust_specialist:
      name: "@rust-specialist"
      model: "sonnet"
      capabilities: ["rust_development", "systems_programming", "performance_optimization"]
      timeout: 300

    python_specialist:
      name: "@python-specialist"
      model: "sonnet"
      capabilities: ["python_development", "scripting", "data_processing"]
      timeout: 300

    typescript_specialist:
      name: "@typescript-specialist"
      model: "sonnet"
      capabilities: ["typescript_development", "web_development", "react_patterns"]
      timeout: 300

    golang_specialist:
      name: "@golang-specialist"
      model: "sonnet"
      capabilities: ["go_development", "concurrency_patterns", "microservices"]
      timeout: 300

    test_runner:
      name: "@test-runner"
      model: "sonnet"
      capabilities: ["test_execution", "coverage_analysis", "quality_assurance"]
      timeout: 240

    code_hound:
      name: "@code-hound"
      model: "sonnet-4-5"
      capabilities: ["code_review", "quality_analysis", "standards_enforcement"]
      timeout: 360

    pneuma:
      name: "@Pneuma"
      model: "sonnet-4-5"
      capabilities: ["semantic_compression", "pattern_abstraction", "code_optimization"]
      timeout: 300

    docs_writer:
      name: "@docs-writer"
      model: "sonnet"
      capabilities: ["technical_documentation", "api_docs", "user_guides"]
      timeout: 240

    git_workflow:
      name: "@git-workflow"
      model: "sonnet"
      capabilities: ["version_control", "branch_management", "deployment"]
      timeout: 180

    security_specialist:
      name: "@security-specialist"
      model: "sonnet-4-5"
      capabilities: ["security_analysis", "threat_modeling", "vulnerability_assessment"]
      timeout: 480

    devops_engineer:
      name: "@devops-engineer"
      model: "sonnet"
      capabilities: ["infrastructure", "ci_cd", "deployment_automation"]
      timeout: 300

    ux_designer:
      name: "@ux-designer"
      model: "sonnet"
      capabilities: ["user_experience", "interface_design", "usability_testing"]
      timeout: 360

# Context Passing Protocol (Pneuma Compressed)
context_protocol:
  # Dense context format
  compression:
    use_symbolic_notation: true
    abbreviate_keys: true      # "requirements" -> "req", "dependencies" -> "deps"
    limit_context_depth: 3     # Maximum nested levels
    remove_redundancy: true

  # Standard context keys (abbreviated)
  standard_keys:
    task: "task"              # Task description
    req: "requirements"       # Requirements list
    deps: "dependencies"      # Dependencies
    ctx: "context"           # Additional context
    std: "standards"         # Standards/conventions
    lang: "language"         # Programming language
    out: "expected_output"   # Expected deliverables

  # Context validation
  validation:
    max_size: 2000           # Characters
    required_keys: ["task"]  # Minimum required
    compress_large_values: true

# Synapse Integration
synapse:
  auto_activate: true        # Automatically start Synapse if needed
  fallback_on_unavailable: true
  cache_duration: 3600      # 1 hour cache for standards/patterns

  # Knowledge retrieval
  standards_cache: true
  pattern_search: true
  template_matching: true

  # Pattern storage
  store_successful_workflows: true
  pattern_confidence_threshold: 0.7
  usage_tracking: true

# Performance Monitoring
monitoring:
  # Execution metrics
  track_agent_performance: true
  measure_coordination_overhead: true
  log_communication_patterns: true

  # Quality metrics
  measure_context_density: true
  track_workflow_efficiency: true
  monitor_success_rates: true

  # Optimization targets
  target_efficiency: 0.8     # 80% efficiency target
  max_coordination_overhead: 0.2  # 20% overhead limit
  context_compression_target: 0.7  # 70% compression

# Symbolic State Notation (Pneuma inspired)
state_symbols:
  # Agent states
  pending: "⊕"              # Task queued
  progress: "⊙"             # Agent executing
  complete: "⊗"             # Task finished
  blocked: "⊘"              # Dependency failure
  failed: "⊗̸"               # Execution failed

  # Workflow states
  workflow_active: "◐"      # Workflow running
  workflow_complete: "●"    # Workflow finished
  workflow_failed: "○"      # Workflow failed

  # Priority indicators
  high_priority: "!"        # Critical task
  medium_priority: "~"      # Standard task
  low_priority: "-"         # Background task

# Quality Thresholds
quality:
  # Completion criteria
  minimum_success_rate: 0.8  # 80% agent success required
  context_compression_min: 0.6  # 60% minimum compression
  workflow_efficiency_min: 0.7  # 70% minimum efficiency

  # Pattern recognition
  pattern_confidence_threshold: 0.75
  workflow_reuse_threshold: 0.8
  optimization_trigger: 0.6  # Below 60% efficiency triggers optimization

# Development & Debug
development:
  debug_mode: false
  log_level: "INFO"
  save_communication_log: true
  verbose_state_logging: false

  # Testing
  mock_agent_responses: false
  simulate_agent_delays: false
  test_mode: false