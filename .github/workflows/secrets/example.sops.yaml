# Example SOPS Encrypted Secrets File
# Phase 6: Template for adding new encrypted secrets
#
# This file demonstrates the structure and workflow for SOPS-encrypted secrets.
# Copy this template to create new secret files as needed.

# =============================================================================
# USAGE WORKFLOW
# =============================================================================
#
# 1. Create new secrets file from this template:
#    cp .github/workflows/secrets/example.sops.yaml .github/workflows/secrets/my-secrets.sops.yaml
#
# 2. Edit the new file with plain values:
#    vim .github/workflows/secrets/my-secrets.sops.yaml
#
# 3. Encrypt the file in-place:
#    sops -e -i .github/workflows/secrets/my-secrets.sops.yaml
#
# 4. Verify encryption succeeded:
#    head -20 .github/workflows/secrets/my-secrets.sops.yaml
#    # Should show "sops:" metadata block at the end
#
# 5. Commit encrypted file:
#    git add .github/workflows/secrets/my-secrets.sops.yaml
#    git commit -m "Add encrypted secrets for XYZ integration"
#
# 6. To edit later (SOPS auto-decrypts for editing, re-encrypts on save):
#    sops .github/workflows/secrets/my-secrets.sops.yaml
#
# =============================================================================

# =============================================================================
# Example: API Keys
# =============================================================================
api_keys:
  # External service API key
  # Replace EXAMPLE_KEY_12345 with real key before encrypting
  service_name: "EXAMPLE_KEY_12345"

  # Another service
  another_service: "EXAMPLE_TOKEN_67890"

# =============================================================================
# Example: Database Credentials
# =============================================================================
database:
  # PostgreSQL connection string
  postgres_url: "postgresql://user:EXAMPLE_PASSWORD@localhost:5432/dbname"

  # Redis connection
  redis_url: "redis://EXAMPLE_PASSWORD@localhost:6379/0"

# =============================================================================
# Example: Webhook URLs
# =============================================================================
webhooks:
  # Slack incoming webhook
  slack: "https://hooks.slack.com/services/EXAMPLE/WEBHOOK/URL"

  # Discord webhook
  discord: "https://discord.com/api/webhooks/EXAMPLE/WEBHOOK"

# =============================================================================
# Example: SSH Keys (use YAML multiline strings)
# =============================================================================
ssh_keys:
  deploy_key: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    EXAMPLE_KEY_CONTENT_REPLACE_WITH_REAL_KEY
    EXAMPLE_KEY_CONTENT_REPLACE_WITH_REAL_KEY
    -----END OPENSSH PRIVATE KEY-----

# =============================================================================
# Example: OAuth Tokens
# =============================================================================
oauth:
  github_pat: "ghp_EXAMPLE_TOKEN_REPLACE_WITH_REAL"
  gitlab_token: "glpat-EXAMPLE_TOKEN_REPLACE_WITH_REAL"

# =============================================================================
# SOPS METADATA (automatically added when encrypting)
# =============================================================================
# After running `sops -e -i`, SOPS will append metadata like:
#
# sops:
#   kms: []
#   gcp_kms: []
#   azure_kv: []
#   hc_vault: []
#   age:
#     - recipient: age15ss3edcg6ejg2mapcnucugnsegcyrs23tzts55jdmtv5wjshha6qy9e0m9
#       enc: |
#         -----BEGIN AGE ENCRYPTED FILE-----
#         ...encrypted data...
#         -----END AGE ENCRYPTED FILE-----
#   lastmodified: "2025-10-16T00:00:00Z"
#   mac: ENC[AES256_GCM,data:...,iv:...,tag:...,type:str]
#   pgp: []
#   unencrypted_suffix: _unencrypted
#   version: 3.8.1
#
# Once encrypted, all values above (EXAMPLE_*) will be replaced with encrypted blobs.

# =============================================================================
# NOTES
# =============================================================================
# - Never commit unencrypted secrets to git
# - .sops.yaml defines encryption rules (age recipient)
# - SOPS_AGE_KEY environment variable holds decryption key
# - In CI: Add SOPS_AGE_KEY to GitHub Secrets (Settings → Secrets → Actions)
# - Locally: export SOPS_AGE_KEY=$(cat ~/.age/key.txt)
# - See docs/duality/SOPS_USAGE.md for complete guide
