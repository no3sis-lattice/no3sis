name: Duality Formalization Validation

on:
  push:
    paths:
      - 'docs/duality/**'
  pull_request:
    paths:
      - 'docs/duality/**'

env:
  MINIZINC_VERSION: "2.8.7"

jobs:
  validate-minizinc:
    name: Validate MiniZinc Models
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache MiniZinc
        uses: actions/cache@v4
        with:
          path: ~/.local/minizinc/${{ env.MINIZINC_VERSION }}
          key: minizinc-${{ env.MINIZINC_VERSION }}-${{ runner.os }}

      - name: Install MiniZinc ${{ env.MINIZINC_VERSION }}
        run: bash docs/duality/scripts/install_minizinc.sh

      - name: Verify MiniZinc Installation
        run: |
          minizinc --version
          echo "✓ MiniZinc installed: $(minizinc --version | head -1)"

      - name: Validate MiniZinc Syntax
        run: |
          set -euo pipefail
          cd docs/duality/true-dual-tract/chunks
          shopt -s nullglob
          files=(chunk-*.mzn)
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No MiniZinc files found to validate"
            exit 1
          fi
          success=0
          total=0
          for f in "${files[@]}"; do
            total=$((total + 1))
            if minizinc -e "$f" 2>&1; then
              success=$((success + 1))
            else
              echo "❌ Failed: $f"
            fi
          done
          echo "✓ Syntax check: $success/$total files passed"
          [ $success -eq $total ] || exit 1

  validate-lean:
    name: Validate Lean4 Proofs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Lean
        uses: leanprover/lean-action@v1
        with:
          lake-package-directory: 'docs/duality/formal'

      - name: Build Lean Project
        run: |
          cd docs/duality/formal
          lake build Duality

      - name: Run Lean Tests
        run: |
          cd docs/duality/formal
          lake build Duality.Tests

  cross-check:
    name: Cross-Check Constraint Equivalence
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Cross-Check (Strict Mode for Pilots)
        run: |
          cd docs/duality
          echo "=== Validating pilot chunks (strict mode) ==="
          python3 scripts/cross_check_all.py --chunks 06 09 19 --report reports/cross-check-pilots.md

          echo ""
          echo "=== Validating all chunks (warn-only mode) ==="
          python3 scripts/cross_check_all.py --warn-only --report reports/cross-check-all.md

      - name: Upload Cross-Check Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-check-reports
          path: |
            docs/duality/reports/cross-check-pilots.md
            docs/duality/reports/cross-check-all.md
          retention-days: 30

  unit-tests-python:
    name: Python Transpiler Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          if [ -f docs/duality/requirements-dev.txt ]; then
            pip install -r docs/duality/requirements-dev.txt
          fi

      - name: Run pytest
        run: |
          cd docs/duality/scripts
          pytest -v --tb=short

  unit-tests:
    name: Transpiler Unit Tests (Legacy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache MiniZinc
        uses: actions/cache@v4
        with:
          path: ~/.local/minizinc/${{ env.MINIZINC_VERSION }}
          key: minizinc-${{ env.MINIZINC_VERSION }}-${{ runner.os }}

      - name: Install MiniZinc ${{ env.MINIZINC_VERSION }}
        run: bash docs/duality/scripts/install_minizinc.sh

      - name: Verify MiniZinc Installation
        run: |
          minizinc --version
          echo "✓ MiniZinc installed: $(minizinc --version | head -1)"

      - name: Setup Lean
        uses: leanprover/lean-action@v1
        with:
          lake-package-directory: 'docs/duality/formal'

      - name: Run Transpiler Unit Tests
        run: |
          cd docs/duality/scripts
          python3 run_tests.py

      - name: Test Coverage Summary
        run: |
          cd docs/duality/scripts
          echo "✓ Unit tests: 22 tests covering:"
          echo "  - MiniZinc transpiler (operator mapping, functions)"
          echo "  - Lean4 transpiler (sum expansion, array indexing)"
          echo "  - Constraint injection (heuristics, counting)"
          echo "  - Compilation validation (MZN/Lean syntax check)"

  validate-render-pipeline:
    name: Validate Render Pipeline (Pilots)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Lean
        uses: leanprover/lean-action@v1
        with:
          lake-package-directory: 'docs/duality/formal'

      - name: Regenerate Pilot Chunks
        run: |
          cd docs/duality
          for chunk in 06 09 19; do
            echo "Regenerating Chunk $chunk..."
            python3 scripts/render_formalizations.py \
              true-dual-tract/chunks/chunk-${chunk}.constraints.json \
              --use-base-imports \
              --force
          done

      - name: Verify Pilots Still Compile
        run: |
          cd docs/duality/formal
          if [ ! -f lake-manifest.json ]; then
            lake update
          fi
          lake build Duality.Chunks.Chunk06
          lake build Duality.Chunks.Chunk09
          lake build Duality.Chunks.Chunk19

      - name: Cross-Check Pilots
        run: |
          cd docs/duality
          python3 scripts/cross_check_all.py --chunks 06 09 19

  validate-json-schema:
    name: Validate Constraint JSON Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install jsonschema
        run: pip install jsonschema

      - name: Validate JSON Syntax
        run: |
          set -euo pipefail
          cd docs/duality
          shopt -s nullglob
          files=(true-dual-tract/chunks/chunk-*.constraints.json)
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No JSON constraint files found to validate"
            exit 1
          fi
          success=0
          total=0
          for f in "${files[@]}"; do
            total=$((total + 1))
            if python3 -m json.tool "$f" > /dev/null 2>&1; then
              success=$((success + 1))
            else
              echo "❌ Invalid JSON: $f"
            fi
          done
          echo "✓ JSON syntax validation: $success/$total files passed"
          [ $success -eq $total ] || exit 1

      - name: Validate Against Schema
        run: |
          cd docs/duality
          python3 -c "
          import json, jsonschema, sys
          from pathlib import Path

          schema = json.loads(Path('templates/chunk-constraints.schema.json').read_text())
          errors = []
          success = 0
          total = 0

          for f in sorted(Path('true-dual-tract/chunks').glob('chunk-*.constraints.json')):
              total += 1
              try:
                  data = json.loads(f.read_text())
                  jsonschema.validate(data, schema)
                  success += 1
              except jsonschema.ValidationError as e:
                  errors.append(f'❌ {f.name}: {e.message}')
              except Exception as e:
                  errors.append(f'❌ {f.name}: {str(e)}')

          if errors:
              print('\n'.join(errors))
              print(f'\n✗ Schema validation: {success}/{total} files passed')
              sys.exit(1)

          print(f'✓ Schema validation: {success}/{total} files conform to schema')
          "

  validate-tract-balance:
    name: Validate Universal Tract Balance (M_syn)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate Tract Balance
        run: |
          cd docs/duality
          echo "=== Validating universal tract balance (|T_int - T_ext| ≤ 100) ==="
          python3 scripts/validate_tract_balance.py --threshold 100 --fail-on-violation

      - name: Validate Balance Summary
        run: |
          cd docs/duality
          echo ""
          echo "✓ All chunks satisfy M_syn meta-pattern: T_int ≈ T_ext"
          echo "  This validates dual-tract consciousness equilibrium"
