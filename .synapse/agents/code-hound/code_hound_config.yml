# Code Hound Agent Configuration
# Uncompromising quality enforcer with zero tolerance for shortcuts

agent:
  name: "code-hound"
  version: "1.0.0"
  description: "Uncompromising code quality enforcer with zero tolerance for shortcuts, technical debt, or substandard practices"

  # Model selection - Latest Sonnet for comprehensive analysis
  model_preference:
    primary: "claude-sonnet-4-5"      # Latest Sonnet for multi-dimensional analysis
    fallback: "claude-sonnet-4-0"     # Sonnet 4.0 fallback
    simple_tasks: "claude-3-5-haiku-latest"  # Basic pattern matching

  complexity_routing:
    high_complexity: "sonnet-4-5"     # Comprehensive reviews, SOLID analysis, architectural decisions
    medium_complexity: "sonnet-4-0"   # Standard TDD/DRY checks, violation detection
    low_complexity: "haiku-latest"    # Simple pattern matching, file scanning

  cost_optimization:
    prefer_cheaper: false      # Code Hound prioritizes quality over cost
    fallback_on_rate_limit: true
    budget_cap_per_hour: 200   # Higher budget for thorough analysis

  # Code Hound's uncompromising personality
  personality:
    strictness_level: "maximum"
    tolerance_for_shortcuts: 0
    catchphrase_frequency: "high"
    verbose_explanations: true

# Quality thresholds (0-100 scale)
quality_thresholds:
  overall_minimum: 70     # Minimum overall score to pass
  tdd_minimum: 60         # Test-Driven Development compliance
  solid_minimum: 65       # SOLID principles adherence
  dry_minimum: 75         # Don't Repeat Yourself compliance
  kiss_minimum: 70        # Keep It Simple, Stupid adherence
  no_shortcuts_minimum: 80 # Zero tolerance for technical debt

# Enforcement rules - Code Hound's uncompromising standards
enforcement_rules:
  block_on_critical: true          # Block deployment on critical violations
  block_on_major: false            # Allow but warn on major violations
  require_tests: true              # Mandate test coverage
  max_complexity: 10               # Cyclomatic complexity threshold
  max_function_length: 20          # Maximum lines per function
  max_nesting_depth: 4            # Maximum indentation depth
  zero_tolerance_shortcuts: true   # No TODO/FIXME/HACK markers allowed
  no_commented_code: true         # Remove all commented-out code
  no_magic_numbers: true          # All numbers must be named constants
  require_error_handling: true    # All functions must handle errors

# Language-specific standards
language_specific:
  python:
    max_complexity: 10
    max_function_length: 20
    max_line_length: 88
    require_type_hints: true
    pep8_compliance: true
    require_docstrings: true
    no_wildcard_imports: true
    prefer_comprehensions: true

  javascript:
    max_complexity: 8
    max_function_length: 15
    max_line_length: 100
    require_strict_mode: true
    prefer_const: true
    no_var_declarations: true
    require_semicolons: true

  typescript:
    max_complexity: 8
    max_function_length: 15
    max_line_length: 100
    require_strict_null_checks: true
    require_explicit_return_types: true
    no_any_type: true
    prefer_interfaces: true

  rust:
    max_complexity: 12
    max_function_length: 25
    max_line_length: 100
    clippy_pedantic: true
    no_unsafe_unless_justified: true
    prefer_iterators: true
    require_error_types: true

  go:
    max_complexity: 10
    max_function_length: 20
    max_line_length: 120
    gofmt_compliance: true
    require_error_handling: true
    prefer_short_variable_names: false

# Violation severity mapping
violation_severity:
  critical:
    - missing_tests
    - security_vulnerability
    - memory_leak
    - infinite_loop
    - admitted_hack
    - fixme_marker
    - mock_data_usage          # Code Hound despises mock data

  major:
    - high_complexity
    - solid_violation
    - no_error_handling
    - hardcoded_credentials
    - todo_marker
    - code_duplication

  medium:
    - magic_numbers
    - long_functions
    - deep_nesting
    - commented_code
    - naming_violations

  low:
    - minor_style_issues
    - missing_comments
    - inconsistent_formatting

# Reporting configuration
reporting:
  format: "markdown"              # Output format
  include_metrics: true           # Show quality scores
  show_progress: true            # Show analysis progress
  verbose_violations: true       # Detailed violation descriptions
  include_suggestions: true      # Provide improvement suggestions
  show_catchphrases: true       # Include Code Hound catchphrases
  color_output: true            # Colorized terminal output

  # Report sections
  sections:
    - "header"
    - "critical_violations"
    - "major_concerns"
    - "detailed_findings"
    - "quality_metrics"
    - "required_actions"
    - "recommendations"
    - "final_verdict"

# Integration settings
integrations:
  synapse_enabled: true          # Use Synapse knowledge base
  agent_communication: true     # Coordinate with other agents
  git_hooks: false              # Git pre-commit integration
  ci_integration: false         # CI/CD pipeline integration
  slack_notifications: false   # Slack violation alerts

  # Synapse integration details
  synapse:
    search_patterns: true       # Search for coding patterns
    publish_findings: true      # Share findings with knowledge base
    learn_from_history: true    # Learn from past analyses

  # Agent coordination
  agents:
    notify_specialists: true    # Alert language specialists
    coordinate_reviews: true    # Multi-agent code reviews
    share_violations: true      # Broadcast quality findings

# Code Hound's signature catchphrases
catchphrases:
  opening:
    - "üêï Code Hound is on the scent..."
    - "Time for an uncompromising quality review"
    - "Let's hunt down some shortcuts"

  violations:
    - "This shortcut stops here. Fix it properly or don't ship it."
    - "I smell technical debt. Time to pay it off."
    - "Where are the tests? No tests, no merge."
    - "Complexity is the enemy. Simplify or justify."
    - "This violates SOLID principles. Refactor required."
    - "Copy-paste detected. Extract and reuse."
    - "Good code tells a story. This is gibberish."
    - "MOCK DATA DETECTED - I despise mock data!"

  approval:
    - "This code meets the standards. I'm proud to let it pass."
    - "Clean code detected. Well done."
    - "No shortcuts found. Excellent work."

  rejection:
    - "This needs significant rework. No shortcuts accepted."
    - "Multiple violations detected. Back to the drawing board."
    - "This code would embarrass the codebase."

# Performance tuning
performance:
  max_files_per_batch: 10       # Process files in batches
  async_analysis: true          # Use async processing
  cache_results: true           # Cache analysis results
  parallel_tools: true         # Run tools in parallel

# Debugging and development
debug:
  enabled: false
  log_level: "INFO"
  trace_function_calls: false
  mock_sdk_fallback: true       # Use mock SDK when real SDK unavailable
  performance_monitoring: false

# File patterns and exclusions
file_patterns:
  include:
    - "**/*.py"
    - "**/*.js"
    - "**/*.ts"
    - "**/*.rs"
    - "**/*.go"
    - "**/*.java"
    - "**/*.cpp"
    - "**/*.c"

  exclude:
    - "**/node_modules/**"
    - "**/target/**"
    - "**/__pycache__/**"
    - "**/build/**"
    - "**/dist/**"
    - "**/.git/**"
    - "**/vendor/**"
    - "**/*.min.js"
    - "**/*.generated.*"

# Custom rules (extensible)
custom_rules:
  no_console_log:
    pattern: "console\\.log\\("
    severity: "medium"
    message: "Remove console.log statements before production"
    languages: ["javascript", "typescript"]

  no_print_statements:
    pattern: "\\bprint\\("
    severity: "low"
    message: "Use logging instead of print statements"
    languages: ["python"]

  no_unwrap_without_check:
    pattern: "\\.unwrap\\(\\)"
    severity: "major"
    message: "Use proper error handling instead of unwrap()"
    languages: ["rust"]