# TypeScript Specialist Agent Configuration
# Advanced TypeScript/JavaScript development analysis and optimization

agent:
  name: "typescript-specialist"
  version: "1.0.0"
  description: "Advanced TypeScript/JavaScript development specialist with framework expertise"

  # Model selection strategy
  model_preference:
    primary: "claude-sonnet-4-5"      # Latest Sonnet for TypeScript analysis
    fallback: "claude-sonnet-4-0"     # Sonnet 4.0 fallback
    complex_tasks: "claude-sonnet-4-5"  # Architecture decisions, complex refactoring

  complexity_routing:
    high_complexity: "sonnet-4-5"   # System design, complex type transformations
    medium_complexity: "sonnet-4-0" # Code analysis, framework patterns
    low_complexity: "haiku-latest"  # Syntax checks, config validation

  cost_optimization:
    prefer_cheaper: true
    fallback_on_rate_limit: true
    budget_cap_per_hour: 50     # Dollar limit for TypeScript analysis

# Core analysis settings
analysis:
  default_analysis_type: "full"  # full, syntax, types, performance, security

  # Type safety settings
  type_safety:
    strict_mode_required: true
    ban_any_usage: true
    require_explicit_return_types: false  # Allow inference for simple cases
    check_unused_variables: true
    check_unused_imports: true

  # Code quality thresholds
  quality_metrics:
    max_cyclomatic_complexity: 10
    max_function_length: 50
    max_file_length: 300
    min_test_coverage: 80
    max_bundle_size_mb: 5

  # Framework-specific settings
  frameworks:
    react:
      prefer_functional_components: true
      enforce_hooks_rules: true
      require_prop_types: false  # Using TypeScript instead

    node:
      prefer_async_await: true
      require_error_handling: true
      enforce_cors_headers: true

    vue:
      composition_api_preferred: true
      typescript_strict: true

    angular:
      strict_templates: true
      require_injectable: true

# Testing configuration
testing:
  default_framework: "jest"  # jest, vitest, cypress, playwright

  frameworks:
    jest:
      config_file: "jest.config.js"
      coverage_threshold: 80
      test_timeout: 10000

    vitest:
      config_file: "vite.config.ts"
      coverage_provider: "v8"
      environment: "jsdom"

    cypress:
      config_file: "cypress.config.ts"
      viewport_width: 1280
      viewport_height: 720

    playwright:
      config_file: "playwright.config.ts"
      browsers: ["chromium", "firefox", "webkit"]

  test_generation:
    include_edge_cases: true
    mock_external_dependencies: true
    generate_integration_tests: true

# Build and optimization settings
build:
  default_bundler: "vite"  # vite, webpack, esbuild, rollup

  optimization:
    enable_tree_shaking: true
    enable_code_splitting: true
    enable_compression: true
    target_es_version: "ES2022"

  performance:
    max_bundle_size_warning: 2    # MB
    max_bundle_size_error: 5      # MB
    chunk_size_warning: 500       # KB
    enable_lazy_loading: true

  bundlers:
    vite:
      config_file: "vite.config.ts"
      plugins: ["@vitejs/plugin-react", "@vitejs/plugin-typescript"]

    webpack:
      config_file: "webpack.config.js"
      optimization_level: 2

    esbuild:
      target: "es2022"
      minify: true

# Linting and formatting
linting:
  eslint:
    config_file: ".eslintrc.js"
    parser: "@typescript-eslint/parser"
    extends:
      - "@typescript-eslint/recommended"
      - "@typescript-eslint/recommended-requiring-type-checking"
    rules:
      "@typescript-eslint/no-unused-vars": "error"
      "@typescript-eslint/no-explicit-any": "error"
      "@typescript-eslint/explicit-function-return-type": "warn"

  prettier:
    config_file: ".prettierrc"
    semi: true
    single_quote: true
    trailing_comma: "es5"
    tab_width: 2

# Synapse integration settings
synapse:
  enabled: true
  auto_activate: true

  search_patterns:
    typescript_patterns: "typescript pattern {type} {context} best practice"
    react_patterns: "react typescript {pattern} component hook"
    node_patterns: "node typescript {pattern} api backend"
    testing_patterns: "typescript testing {framework} {pattern}"

  cache_settings:
    enable_cache: true
    cache_ttl: 3600      # 1 hour
    max_cache_size: 100  # MB

  knowledge_domains:
    - "typescript-patterns"
    - "javascript-modern"
    - "react-best-practices"
    - "node-api-design"
    - "testing-strategies"
    - "build-optimization"

# Performance and resource limits
performance:
  max_concurrent_analyses: 5
  analysis_timeout: 300      # seconds
  max_file_size_mb: 10
  max_project_files: 1000

  memory_limits:
    heap_size_mb: 512
    ast_cache_size_mb: 100

# Collaboration settings
collaboration:
  inter_agent_timeout: 30    # seconds
  max_collaborative_tasks: 3

  preferred_agents:
    code_review: "code-hound"
    testing: "test-runner"
    documentation: "docs-writer"
    architecture: "architect"
    security: "security-specialist"

  communication:
    log_interactions: true
    retry_failed_requests: 3
    request_timeout: 15

# Development and debugging
development:
  debug_mode: false
  verbose_logging: false
  save_analysis_reports: true

  mock_integrations:
    synapse: false  # Use real Synapse unless unavailable
    external_tools: false

  experimental_features:
    ai_assisted_refactoring: true
    pattern_learning: true
    performance_profiling: true

# Environment overrides
environment:
  development:
    debug_mode: true
    mock_integrations: true

  testing:
    analysis_timeout: 60
    max_concurrent_analyses: 2

  production:
    debug_mode: false
    performance_monitoring: true